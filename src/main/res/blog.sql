/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50619
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50619
File Encoding         : 65001

Date: 2015-02-02 23:38:57
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `blog_category`
-- ----------------------------
DROP TABLE IF EXISTS `blog_category`;
CREATE TABLE `blog_category` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `slug` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of blog_category
-- ----------------------------
INSERT INTO `blog_category` VALUES ('1', '程序', 'program');
INSERT INTO `blog_category` VALUES ('2', '软件', 'software');

-- ----------------------------
-- Table structure for `blog_link`
-- ----------------------------
DROP TABLE IF EXISTS `blog_link`;
CREATE TABLE `blog_link` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `category` varchar(255) COLLATE utf8_bin NOT NULL,
  `slug` varchar(255) COLLATE utf8_bin NOT NULL,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `status` tinyint(3) NOT NULL,
  `href` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `sort` tinyint(3) DEFAULT '0',
  `target` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of blog_link
-- ----------------------------
INSERT INTO `blog_link` VALUES ('2', 'nav-menu-main', 'home', '首页', '1', '/', '1', '_self');
INSERT INTO `blog_link` VALUES ('4', 'nav-menu-main', 'program', '程序', '1', '/category/program/', '3', '_self');
INSERT INTO `blog_link` VALUES ('6', 'x', 'software', '软件', '1', '/category/software/', '4', '_self');
INSERT INTO `blog_link` VALUES ('7', 'nav-menu-main', 'favorite', '收藏', '2', '/category/favorite/', '5', '_blank');
INSERT INTO `blog_link` VALUES ('8', 'nav', 'links', '链接', '1', '/links/', '6', '_self');
INSERT INTO `blog_link` VALUES ('9', 'nav-menu-main', 'admin', '后台', '1', '/admin/', '8', '_blank');
INSERT INTO `blog_link` VALUES ('10', 'nav-menu-main', 'about', '关于', '1', '/about/', '7', '_self');
INSERT INTO `blog_link` VALUES ('11', 'quick-link', 'weibo', '新浪微博', '1', 'http://weibo.com/', '1', '_blank');
INSERT INTO `blog_link` VALUES ('12', 'quick-link', 'sso', '单点登录', '1', 'http://zhanqi.net/sso/', '0', '_blank');
INSERT INTO `blog_link` VALUES ('13', 'quick-link', 'admin', '后台管理', '1', '/admin/', '0', '_blank');
INSERT INTO `blog_link` VALUES ('14', 'quick-link', 'qzone', 'QQ空间', '1', 'http://qzone.qq.com/', '0', '_blank');

-- ----------------------------
-- Table structure for `blog_option`
-- ----------------------------
DROP TABLE IF EXISTS `blog_option`;
CREATE TABLE `blog_option` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `value` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of blog_option
-- ----------------------------
INSERT INTO `blog_option` VALUES ('3', 'email.hostname', 'smtp.exmail.qq.com');
INSERT INTO `blog_option` VALUES ('4', 'email.username', 'admin@zhanqi.net');
INSERT INTO `blog_option` VALUES ('5', 'email.nickname', '超级程序员');
INSERT INTO `blog_option` VALUES ('6', 'email.password', 'java0404');
INSERT INTO `blog_option` VALUES ('7', 'email.charset', 'utf-8');
INSERT INTO `blog_option` VALUES ('20', 'blog.more', 'Continue Reading ...');
INSERT INTO `blog_option` VALUES ('21', 'blog.thumbnail', 'http://ww3.sinaimg.cn/mw690/65e9d7c5gw1dv033tdfncj.jpg');
INSERT INTO `blog_option` VALUES ('22', 'blog.gravatar', 'blog.gravatar');
INSERT INTO `blog_option` VALUES ('24', 'blog.name', '超级程序员');
INSERT INTO `blog_option` VALUES ('25', 'ds.shortname', 'zhanqi');
INSERT INTO `blog_option` VALUES ('26', 'blog.desc', '不积跬步，无以至千里；不积小流，无以成江海。');
INSERT INTO `blog_option` VALUES ('27', 'post.pagesize', '8');
INSERT INTO `blog_option` VALUES ('28', 'post.pagingsize', '5');
INSERT INTO `blog_option` VALUES ('29', 'post.relate', '10');
INSERT INTO `blog_option` VALUES ('30', 'post.random', '10');
INSERT INTO `blog_option` VALUES ('31', 'blog.titlegap', ' - ');
INSERT INTO `blog_option` VALUES ('32', 'sidebar-navmen', 'true');
INSERT INTO `blog_option` VALUES ('33', 'sidebar-quick', 'true');
INSERT INTO `blog_option` VALUES ('34', 'sidebar-friend', 'true');
INSERT INTO `blog_option` VALUES ('35', 'sidebar-cats', 'true');
INSERT INTO `blog_option` VALUES ('36', 'sidebar-tags', 'true');
INSERT INTO `blog_option` VALUES ('37', 'sidebar-recent', 'true');
INSERT INTO `blog_option` VALUES ('38', 'sidebar-topread', 'false');

-- ----------------------------
-- Table structure for `blog_param`
-- ----------------------------
DROP TABLE IF EXISTS `blog_param`;
CREATE TABLE `blog_param` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(255) COLLATE utf8_bin NOT NULL,
  `value` varchar(255) COLLATE utf8_bin NOT NULL,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `sort` int(11) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=503 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of blog_param
-- ----------------------------
INSERT INTO `blog_param` VALUES ('2', 'SYS_GENDER', '1', '男', '1');
INSERT INTO `blog_param` VALUES ('3', 'SYS_GENDER', '2', '女', '2');
INSERT INTO `blog_param` VALUES ('4', 'POST_STATUS', '1', '草稿', '1');
INSERT INTO `blog_param` VALUES ('5', 'POST_STATUS', '2', '发布', '2');
INSERT INTO `blog_param` VALUES ('51', 'LINK_TARGET', '_self', '当前页面', null);
INSERT INTO `blog_param` VALUES ('52', 'LINK_TARGET', '_blank', '新窗口', null);
INSERT INTO `blog_param` VALUES ('500', 'LINK_CATEGORY', 'nav-menu-main', '首页导航', null);
INSERT INTO `blog_param` VALUES ('501', 'LINK_STATUS', '1', '正常', '1');
INSERT INTO `blog_param` VALUES ('502', 'LINK_STATUS', '2', '不显示', '2');

-- ----------------------------
-- Table structure for `blog_post`
-- ----------------------------
DROP TABLE IF EXISTS `blog_post`;
CREATE TABLE `blog_post` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `catid` int(11) unsigned NOT NULL,
  `title` varchar(255) COLLATE utf8_bin NOT NULL,
  `content` longtext CHARACTER SET utf8 NOT NULL,
  `pubdate` datetime NOT NULL,
  `status` tinyint(3) NOT NULL,
  `thumbnail` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=536 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of blog_post
-- ----------------------------
INSERT INTO `blog_post` VALUES ('69', '2', 'Firefox 4 更改弹出对话框风格', '<p>\n	1：地址栏输入 about:config\n</p>\n<p>\n	2：搜索 prompts\n</p>\n<p>\n	3：双击 prompts.tab_modal.enabled\n</p>\n<p>\n	4：ok\n</p>\n<p>\n	5：附图\n</p>\n<p>\n	<img class=\"lazy\" data-original=\"http://pic002.cnblogs.com/images/2011/169611/2011103117072060.png\" src=\"\" alt=\"\" /> \n</p>\n<p>\n	<img class=\"lazy\" data-original=\"http://pic002.cnblogs.com/images/2011/169611/2011103117073859.png\" src=\"\" alt=\"\" /> \n</p>', '2011-10-31 09:09:00', '2', null);
INSERT INTO `blog_post` VALUES ('70', '1', 'PL/SQL Developer 8/9 注册机', '<p>\n	测试版本：9.0.5.1648\n</p>\n<p>\n	注册方式：无需替换任何文件，输入注册信息即可\n</p>\n<p>\n	软件下载：<a href=\"http://www.allroundautomations.com/plsqldevorder.html\" target=\"_blank\">软件首页</a> <a href=\"http://www.allroundautomations.com/plsqldevlang/90/index.html\" target=\"_blank\">中文语言包</a> \n</p>\n<p>\n	注册机下载：<a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/pl-sql-dev-8-keyen.zip\">8.0 下载</a> <a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/pl-sql-dev-9-keygen.zip\">9.0 下载</a> <!--more--> <img alt=\"\" data-original=\"http://zhanqi-image.stor.sinaapp.com/post/70.png\" /> \n</p>', '2012-02-11 19:07:00', '2', null);
INSERT INTO `blog_post` VALUES ('71', '2', 'Adobe CS4/CS5 全系列注册机', '<p>\n	适用产品：Adobe CS4、Adobe CS5 全系列\n</p>\n<p>\n	常用产品：Photoshop、Flash、Flash Builder、Dreamweaver、Fireworks\n</p>\n<p>\n	下载地址：<a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/Adobe-KeyGen-5.zip\">下载</a> \n</p>\n<p>\n	为了防止联网激活失效，修改Hosts文件：&nbsp;\n</p>\n<p>\n	<!--more-->\n方法1：点击&nbsp;Patch Hosts File\n</p>\n<p>\n	方法2：Win7--打开目录--C--Windows--System32--drivers--etc--hosts&nbsp;<span style=\"line-height:1.5;\">追加如下内容：\n127.0.0.1 activate.adobe.com </span><img data-original=\"http://zhanqi-image.stor.sinaapp.com/post/71.png\" src=\"\" alt=\"\" style=\"line-height:1.5;\" /> \n</p>', '2012-02-11 19:11:00', '2', null);
INSERT INTO `blog_post` VALUES ('77', '2', 'textarea 在 Chrome Safari FireFox 浏览器中禁用拖动和固定大小', '<p>\n	HTML 标签 textarea 在大部分浏览器中只要指定行（rows）和列（cols）属性，就可以规定 textarea 的尺寸，大小就不会改变，不过更好的办法是使用 CSS 的 height 和 width 属性,但是Chrome,Safari和FireFox渲染的效果不同，可以拖动右下角图标改变大小。但是过分拖动大小会影响页面布局，使页面变得不美观。可以通过添加如下两个样式禁用拖动，固定大小：\n</p>\n<p>\n	1：彻底禁用拖动（推荐）\n</p>\n<pre class=\"prettyprint lang-css brush:css;gutter:false;\">resize: none;\n</pre>\n<p>\n	2：只是固定大小，右下角的拖动图标仍在\n</p>\n<pre class=\"prettyprint lang-css brush:css;gutter:false;\">width: 200px; \nheight: 100px; \nmin-width: 200px; \nmin-height: 100px; \nmax-width: 200px; \nmax-height: 100px; \n</pre>\n<p>\n	3：浏览器信息：\n</p>\n<div style=\"color:red;\" class=\"mycode\">\n<script type=\"text/javascript\">// < ![CDATA[ document.write(navigator.userAgent); // ]]></script>\n</div>\n<p>\n	<strong>效果预览：</strong> \n</p>\n<p>\n	<textarea style=\"margin:0px 15px 15px 0px;width:200px;height:100px;overflow:hidden;padding:5px;\">可以拖动</textarea> \n</p>', '2011-03-16 13:03:00', '2', null);
INSERT INTO `blog_post` VALUES ('78', '2', 'Windows 配置 Apache2 + PHP5 + MySQL5', '<p>\n	<strong>1：相关软件下载：</strong> Apache HTTP Server (httpd) 2.X ：<a href=\"http://httpd.apache.org/download.cgi#apache22\" target=\"_blank\">下载地址</a> （Win32 Binary）\nPHP 5.X VC6 x86 Thread Safe ：<a href=\"http://windows.php.net/download/\" target=\"_blank\">下载地址</a>（选择VC6压缩版，VC9版用于跟IIS集成）\nMySQL Community Server 5.X ：<a href=\"http://dev.mysql.com/downloads/mysql/\" target=\"_blank\">下载地址</a>（选择安装版）\n</p>\n<p>\n	<strong>2：安装软件：</strong> <!--more-->\nApache：默认安装，下一步，直到完成\nphp：解压即可\nMySQL：默认安装，注意选择数据库编码\n</p>\n<p>\n	<strong>3：端口问题：</strong> Apache HTTP Server 安装完成后会自动启动服务，默认端口是<strong>80</strong>，如果IIS服务已启动，则无法启动httpd\n</p>\n<p>\n	<strong>4：解决办法：</strong> 停止IIS服务：控制面板-&gt;管理工具-&gt;Internet 信息服务(IIS)管理器-&gt;网站-&gt;默认网站-&gt;停止（右侧）\n更改IIS端口：网站-&gt;默认网站-&gt;编辑绑定（右键）-&gt;编辑-&gt;更改端口-&gt;重新启动\n更改httpd端口：安装目录-&gt;conf-&gt;httpd.conf-&gt;搜索 <strong>Listen 80 </strong>–&gt;更改端口（如<strong>8888</strong>）-&gt;重新启动服务\n</p>\n<p>\n	<strong>5：配置Apache+PHP：</strong> 浏览：<a href=\"http://localhost:8888/\" target=\"_blank\">http://localhost:8888/</a> ，如果显示：<strong>It works! </strong>则Apache HTTP Server已安装成功\n</p>\n<p>\n	设置PHP目录：打开conf-&gt;http.conf，在该配置文件最后添加：\n</p>\n<pre class=\"code text prettyprint lang-text brush:text\">PHPIniDir \"D:/php/\"\nLoadModule php5_module \"D:/php/php5apache2_2.dll\"</pre>\n添加PHPMIME支持：搜索 <strong>AddType 或 <ifmodule mime_module=\"\"> </ifmodule></strong>–&gt;追加：\n<div class=\"mycode\">\n	<p style=\"color:red;\">\n		AddType application/x-httpd-php .php\n	</p>\n</div>\n<p>\n	配置PHP：重命名 <span style=\"color:#0000ff;\">php.ini-development</span> 为 <span style=\"color:#0000ff;\"><strong>php.ini</strong></span> <strong><span style=\"color:#ff0000;\">注意</span>：</strong>修改配置需要重启Apache服务才能生效\n</p>\n<p>\n	<strong>7：测试是否配置成功：</strong> 进入htdocs目录，新建 test.php，代码如下：\n</p>\n<pre class=\"code php prettyprint lang-php brush:php\"><!--?php phpinfo(); ?--></pre>\n<p>\n	浏览：<a href=\"http://localhost:8888/test.php\" target=\"_blank\">http://localhost:8888/test.php</a> ，成功页面见附图：\n</p>\n<p>\n	<strong>8：配置MySQL:</strong> 添加MySQL扩展：php.ini-&gt;<span style=\"color:#ff0000;\"><strong>;</strong></span>extension=php_mysql.dll-&gt;去掉分号，启用php_mysql.dll\n指定MySQL库位置：php.ini-&gt;修改为：<span style=\"color:#0000ff;\">extension_dir = ext\"，</span>即php_mysql.dll所在目录\n</p>\n<p>\n	<strong>9：测试是否配置成功：</strong> 进入htdocs目录，新建 db.php，代码如下：\n</p>\n<pre class=\"prettyprint lang-php brush:php;gutter:false;\"><?php if (!$link = mysql_connect(\'localhost\', \'root\', \'root\')) { echo \'数据库连接失败！\'; exit; } if (!mysql_select_db(\'mysql\', $link)) { echo \'此数据库不存在！\'; exit; } $sql = \'show databases\'; $result = mysql_query($sql, $link); if (!$result) { echo \'MySQL Error: \' . mysql_error(); exit; } while ($row = mysql_fetch_assoc($result)) { echo $row[\'database\']; } mysql_free_result($result); ?></pre>\n<p>\n	浏览：<a href=\"http://localhost:8888/db.php\" target=\"_blank\">http://localhost:8888/db.php</a> ，成功页面见附图：\n</p>\n<p>\n	<strong>10 ：设置缺省页面：</strong> 搜索 <strong>DirectoryIndex</strong> 追加 index.php：\n</p>\n<div class=\"mycode\">\n	<ifmodule dir_module=\"\">\nDirectoryIndex index.html <strong><span style=\"color:#0000ff;\">index.php</span></strong> </ifmodule>\n</div>\n<strong>11：添加虚拟目录：</strong> 找到：\n<div class=\"mycode\">\n	<directory>\nOptions FollowSymLinks\nAllowOverride None\nOrder deny,allow\nDeny from all\n</directory>\n</div>\n追加：\n<div class=\"mycode\">\n	<span style=\"color:#0000ff;\">Alias</span> <span style=\"color:#ff0000;\">/dwz</span> <span style=\"color:#ff0000;\">\"D:/dwz/\"</span> <directory <span=\"\" style=\"color:#ff0000;\">\"D:/dwz/\"&gt;  Options Indexes FollowSymLinks\nAllowOverride None\nOrder allow,deny\nAllow from all\n</directory>\n</div>\n浏览方式：<a href=\"http://localhost:8888/dwz/\" target=\"_blank\">http://localhost:8888/dwz/</a> <span style=\"color:#ff0000;\">配置PHP成功页面</span> \n<p class=\"mycode\">\n	<img src=\"http://images.cnblogs.com/cnblogs_com/zhanqi/201103/201103052029454680.png\" alt=\"image\" /> \n</p>\n<span style=\"color:#ff0000;\">配置MySQL成功页面，内容为4个默认数据库</span> \n<p class=\"mycode\">\n	<img src=\"http://images.cnblogs.com/cnblogs_com/zhanqi/201103/201103052029487730.png\" alt=\"image\" border=\"0\" /> \n</p>', '2011-03-05 12:26:00', '2', null);
INSERT INTO `blog_post` VALUES ('91', '2', 'MyEclipse 8 注册机', '<p>\n	适用版本：MyEclipse 6.5, 7.0, 7.5, 8.5, 8.6\n</p>\n<p>\n	适用版本：Standard, Professional, Spring, Blue Subscription\n</p>\n<p>\n	下载地址：<a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/MyEclipse-8-KeyGen.zip\">下载</a> \n</p>\n<p>\n	注册步骤：见图片底部\n</p>\n<p>\n	<img class=\"lazy\" data-original=\"http://zhanqi-image.stor.sinaapp.com/post/91.png\" src=\"\" alt=\"img\" />\n</p>', '2011-01-06 01:17:00', '2', null);
INSERT INTO `blog_post` VALUES ('92', '2', 'JDBC 连接 Oracle 数据库', '<pre><span style=\"color: #0000ff\">import</span> java.sql.Connection;\n<span style=\"color: #0000ff\">import</span> java.sql.DriverManager;\n<span style=\"color: #0000ff\">import</span> java.sql.PreparedStatement;\n<span style=\"color: #0000ff\">import</span> java.sql.ResultSet;\n<span style=\"color: #0000ff\">import</span> java.sql.SQLException;\n\n<span style=\"color: #008000\">/**\n * JDBC 连接 Oracle 数据库\n * \n * @author zhanqi\n * \n */</span>\n<span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> ORACLE {\n\n    <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> String driver = &quot;<span style=\"color: #8b0000\">oracle.jdbc.driver.OracleDriver</span>&quot;;\n    <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> String url = &quot;<span style=\"color: #8b0000\">jdbc:oracle:thin:@127.0.0.1:1521:orcl</span>&quot;;\n\n    <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> main(String[] args) {\n        Connection ct = <span style=\"color: #0000ff\">null</span>;\n        PreparedStatement ps = <span style=\"color: #0000ff\">null</span>;\n        ResultSet rs = <span style=\"color: #0000ff\">null</span>;\n        <span style=\"color: #0000ff\">try</span> {\n            <span style=\"color: #008000\">// 加载驱动类</span>\n            Class.forName(driver);\n            <span style=\"color: #008000\">// 得到连接</span>\n            ct = DriverManager.getConnection(url, &quot;<span style=\"color: #8b0000\">scott</span>&quot;, &quot;<span style=\"color: #8b0000\">scott</span>&quot;);\n            <span style=\"color: #008000\">// 得到预编译的 SQL 语句的对象</span>\n            ps = ct.prepareStatement(&quot;<span style=\"color: #8b0000\">select count(*) from emp</span>&quot;);\n            <span style=\"color: #008000\">// 得到结果集</span>\n            rs = ps.executeQuery();\n            <span style=\"color: #008000\">// 循环取出记录</span>\n            <span style=\"color: #0000ff\">while</span> (rs.next()) {\n                System.out.println(rs.getInt(1));\n            }\n        } <span style=\"color: #0000ff\">catch</span> (Exception e) {\n            e.printStackTrace();\n        } <span style=\"color: #0000ff\">finally</span> {\n            <span style=\"color: #008000\">// 关闭资源</span>\n            <span style=\"color: #0000ff\">try</span> {\n                <span style=\"color: #0000ff\">if</span> (rs != <span style=\"color: #0000ff\">null</span>) {\n                    rs.close();\n                }\n                <span style=\"color: #0000ff\">if</span> (ps != <span style=\"color: #0000ff\">null</span>) {\n                    ps.close();\n                }\n                <span style=\"color: #0000ff\">if</span> (ct != <span style=\"color: #0000ff\">null</span>) {\n                    ct.close();\n                }\n            } <span style=\"color: #0000ff\">catch</span> (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}</pre>\n\n<p><strong>附</strong>：</p>\n\n<ul>\n  <li><span style=\"font-family: courier new\">Oracle JDBC driver：<a href=\"http://www.oracle.com/technology/global/cn/software/tech/java/sqlj_jdbc/index.html\" target=\"_blank\">下载</a></span> </li>\n\n  <li><span style=\"font-family: courier new\">Oracle JDBC driver：Oracle安装目录：</span>F:appzhanqiproduct11.2.0dbhome_1jdbclib </li>\n</ul>', '2011-01-05 23:25:00', '2', null);
INSERT INTO `blog_post` VALUES ('93', '2', 'JDBC 连接 SQL Server 2005, 2008 数据库', '<pre class=\"brush:java\">import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\n/** * JDBC 连接 SQL Server 2005,2008 * * @author zhanqi * */\npublic class MSSQLSERVER {\n\n    private static String driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\";\n    private static String url = \"jdbc:sqlserver://127.0.0.1:1433;DatabaseName=Student\";\n\n    public static void main(String[] args) {\n        Connection ct = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            // 加载驱动类\n            Class.forName(driver);\n            // 得到连接\n            ct = DriverManager.getConnection(url, \"root\", \"root\");\n            // 得到预编译的 SQL 语句的对象\n            ps = ct.prepareStatement(\"select count(*) from t_student\");\n            // 得到结果集\n            rs = ps.executeQuery();\n            // 循环取出记录\n            while (rs.next()) {\n                System.out.println(rs.getInt(1));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            // 关闭资源\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (ps != null) {\n                    ps.close();\n                }\n                if (ct != null) {\n                    ct.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}</pre>\nMicrosoft SQL Server JDBC Driver 3.0 ：<a title=\"下载 Microsoft SQL Server JDBC Driver 3.0\" href=\"http://www.microsoft.com/downloads/details.aspx?displaylang=zh-cn&amp;FamilyID=a737000d-68d0-4531-b65d-da0f2a735707\" target=\"_blank\">下载</a>\n\n<span style=\"color: #ff0000;\">注：下载，解压后请选择 sqljdbc4.jar</span>', '2011-01-05 23:10:00', '2', null);
INSERT INTO `blog_post` VALUES ('94', '1', 'JDBC 连接 Access 数据库', '<pre><span style=\"color: #0000ff\">import</span> java.sql.Connection;\n<span style=\"color: #0000ff\">import</span> java.sql.DriverManager;\n<span style=\"color: #0000ff\">import</span> java.sql.ResultSet;\n<span style=\"color: #0000ff\">import</span> java.sql.SQLException;\n<span style=\"color: #0000ff\">import</span> java.sql.Statement;\n\n<span style=\"color: #008000\">/**\n * JDBC-ODBC 连接 Access 数据库\n * 遇到中文乱码时请改用GBK编码\n * \n * @author zhanqi\n * \n */</span>\n<span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> ACCESS {\n\n    <span style=\"color: #008000\">// sun公司的类，不推荐使用</span>\n    <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> String driver = &quot;<span style=\"color: #8b0000\">sun.jdbc.odbc.JdbcOdbcDriver</span>&quot;;\n    <span style=\"color: #008000\">// 更多驱动支持请查看：管理工具--数据源（ODBC）</span>\n    <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> String url = &quot;<span style=\"color: #8b0000\">jdbc:odbc:driver={Microsoft Access Driver (*.mdb)};DBQ=cms.mdb</span>&quot;;\n\n    <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> main(String[] args) {\n        Connection ct = <span style=\"color: #0000ff\">null</span>;\n        Statement ps = <span style=\"color: #0000ff\">null</span>;\n        ResultSet rs = <span style=\"color: #0000ff\">null</span>;\n        <span style=\"color: #0000ff\">try</span> {\n            <span style=\"color: #008000\">// 加载驱动类</span>\n            Class.forName(driver);\n            <span style=\"color: #008000\">// 得到连接</span>\n            ct = DriverManager.getConnection(url);\n            <span style=\"color: #008000\">// 得到基本语句对象,不能使用 PreparedStatement</span>\n            ps = ct.createStatement();\n            <span style=\"color: #008000\">// 执行 SQL 语句</span>\n            rs = ps.executeQuery(&quot;<span style=\"color: #8b0000\">select count(*) from t_user</span>&quot;);\n            <span style=\"color: #008000\">// 循环取出结果</span>\n            <span style=\"color: #0000ff\">while</span> (rs.next()) {\n                System.out.println(rs.getInt(1));\n            }\n        } <span style=\"color: #0000ff\">catch</span> (Exception e) {\n            e.printStackTrace();\n        } <span style=\"color: #0000ff\">finally</span> {\n            <span style=\"color: #008000\">// 关闭资源</span>\n            <span style=\"color: #0000ff\">try</span> {\n                <span style=\"color: #0000ff\">if</span> (rs != <span style=\"color: #0000ff\">null</span>) {\n                    rs.close();\n                }\n                <span style=\"color: #0000ff\">if</span> (ps != <span style=\"color: #0000ff\">null</span>) {\n                    ps.close();\n                }\n                <span style=\"color: #0000ff\">if</span> (ct != <span style=\"color: #0000ff\">null</span>) {\n                    ct.close();\n                }\n            } <span style=\"color: #0000ff\">catch</span> (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}</pre>', '2011-01-05 22:54:00', '2', null);
INSERT INTO `blog_post` VALUES ('95', '2', 'JDBC 连接 MySQL 数据库', '<pre class=\"code hl java\"><span style=\"color: #0000ff\">import</span> java.sql.Connection;\n<span style=\"color: #0000ff\">import</span> java.sql.DriverManager;\n<span style=\"color: #0000ff\">import</span> java.sql.PreparedStatement;\n<span style=\"color: #0000ff\">import</span> java.sql.ResultSet;\n\n<span style=\"color: #008000\">/**\n * JDBC 连接 MySQL 数据库\n * \n * @author zhanqi\n * \n */</span>\n<span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> MySQL {\n\n    <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> String driver = &quot;<span style=\"color: #8b0000\">com.mysql.jdbc.Driver</span>&quot;;\n    <span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> String url = &quot;<span style=\"color: #8b0000\">jdbc:mysql://localhost:3306/数据库名</span>&quot;;\n\n    <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">void</span> main(String[] args) {\n        Connection ct = <span style=\"color: #0000ff\">null</span>;\n        PreparedStatement ps = <span style=\"color: #0000ff\">null</span>;\n        ResultSet rs = <span style=\"color: #0000ff\">null</span>;\n        <span style=\"color: #0000ff\">try</span> {\n            <span style=\"color: #008000\">// 加载驱动类</span>\n            Class.forName(driver);\n            <span style=\"color: #008000\">// 得到连接</span>\n            ct = DriverManager.getConnection(url, &quot;<span style=\"color: #8b0000\">root</span>&quot;, &quot;<span style=\"color: #8b0000\">root</span>&quot;);\n            <span style=\"color: #008000\">// 得到预编译的 SQL 语句的对象</span>\n            ps = ct.prepareStatement(&quot;<span style=\"color: #8b0000\">select count(*) from 表名</span>&quot;);\n            <span style=\"color: #008000\">// 得到结果集</span>\n            rs = ps.executeQuery();\n            <span style=\"color: #008000\">// 循环取出记录</span>\n            <span style=\"color: #0000ff\">while</span> (rs.next()) {\n                System.out.println(rs.getInt(1));\n            }\n        } <span style=\"color: #0000ff\">catch</span> (Exception e) {\n            e.printStackTrace();\n        } <span style=\"color: #0000ff\">finally</span> {\n            <span style=\"color: #008000\">// 关闭资源</span>\n            <span style=\"color: #0000ff\">try</span> {\n                <span style=\"color: #0000ff\">if</span> (rs != <span style=\"color: #0000ff\">null</span>) {\n                    rs.close();\n                }\n                <span style=\"color: #0000ff\">if</span> (ps != <span style=\"color: #0000ff\">null</span>) {\n                    ps.close();\n                }\n                <span style=\"color: #0000ff\">if</span> (ct != <span style=\"color: #0000ff\">null</span>) {\n                    ct.close();\n                }\n            } <span style=\"color: #0000ff\">catch</span> (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}</pre>\n\n<p><strong>附</strong>： </p>\n\n<ul>\n  <li>MySQL Community Server 5.5： <a href=\"http://dev.mysql.com/downloads/mysql/\" target=\"_blank\">下载</a> </li>\n\n  <li>MySQL jdbc driver 5.1：<a href=\"http://dev.mysql.com/downloads/connector/j/\" target=\"_blank\">下载</a> </li>\n</ul>', '2011-01-05 22:33:00', '2', null);
INSERT INTO `blog_post` VALUES ('96', '2', 'MySQL 查看约束，添加约束，删除约束', '查看表的字段信息：desc 表名;\n\n查看表的所有信息：show create table 表名;\n\n添加主键约束：alter table 表名 add constraint 主键 （形如：PK_表名） primary key 表名(主键字段);\n\n添加外键约束：alter table 从表 add constraint 外键（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);\n\n删除主键约束：alter table 表名 drop primary key;\n\n删除外键约束：alter table 表名 drop foreign key 外键（区分大小写）;', '2011-01-05 14:51:00', '2', null);
INSERT INTO `blog_post` VALUES ('97', '1', 'MySQL 添加列，修改列，删除列', 'ALTER TABLE：添加，修改，删除表的列，约束等表的定义。\n\n查看列：desc 表名;\n\n修改表名：alter table t_book rename to bbb;\n\n添加列：alter table 表名 add column 列名 varchar(30);\n\n删除列：alter table 表名 drop column 列名;\n\n修改列名MySQL： alter table bbb change nnnnn hh int;\n\n修改列名SQLServer：exec sp_rename\'t_student.name\',\'nn\',\'column\';\n\n修改列名Oracle：lter table bbb rename column nnnnn to hh int;\n\n修改列属性：alter table t_book modify name varchar(22);\n\nsp_rename：SQLServer 内置的存储过程，用与修改表的定义。', '2011-01-05 10:44:00', '2', null);
INSERT INTO `blog_post` VALUES ('126', '2', 'WinRAR 4 注册机', '<p>\n	1：WinRAR 注册，激活\n</p>\n<p>\n	2：测试版本：WinRAR 4.20 Win7\n</p>\n<p>\n	3：打开 WinRAR-KeyGen-4.0，输入NAME\n</p>\n<p>\n	4：点击 GENERATE，保存到默认安装路径\n</p>\n<p>\n	5：重新打开一个压缩文件，查看帮助，关于，ok\n</p>\n<p>\n	6：下载地址：<a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/WinRAR-KeyGen.zip\">下载</a> \n</p>\n<p>\n	7：附图\n</p>\n<p>\n	<img data-original=\"http://zhanqi-image.stor.sinaapp.com/post/126.png\" class=\"lazy\" alt=\"img\" src=\"\" /> \n</p>', '2012-02-02 15:37:39', '2', null);
INSERT INTO `blog_post` VALUES ('130', '2', 'Eclipse 常用插件', 'eclipse 3.7：<a title=\"eclipse downloads\" href=\"http://www.eclipse.org/downloads/\" target=\"_blank\">下载地址</a>\n\n注意：\n\n1：复制地址就可以了\n\n2：链接为插件主页，无须点击\n\nEclipse Plugin update site URL：\n\n1：<a title=\"插件主页\" href=\"http://subclipse.tigris.org/servlets/ProjectProcess?pageID=p4wYuA\" target=\"_blank\">svn</a>：http://subclipse.tigris.org/update_1.8.x/\n\n<!--more-->\n\n2：<a title=\"插件主页\" href=\"http://www.eclipse.org/m2e/download/\" target=\"_blank\">maven</a>：http://download.eclipse.org/technology/m2e/releases/\n\n3：<a title=\"插件主页\" href=\"http://developer.android.com/sdk/eclipse-adt.html\" target=\"_blank\">android</a>：https://dl-ssl.google.com/android/eclipse/\n\n4：<a title=\"插件主页\" href=\"http://aptana.com/products/studio2/download\" target=\"_blank\">Aptana2</a>：http://download.aptana.com/tools/studio/plugin/install/studio/\n\n5：<a title=\"插件主页\" href=\"http://aptana.com/products/studio3/download\" target=\"_blank\">Aptana3</a>：http://download.aptana.com/studio3/plugin/install/\n\n6：<a title=\"插件主页\" href=\"http://www.eclipse.org/egit/download/\" target=\"_blank\">egit</a>：http://download.eclipse.org/egit/updates/\n\n7：<a title=\"插件主页\" href=\"http://www.projx.it/eclipse-plugin/projx-transfer\" target=\"_blank\">projx-transfer</a>：<a href=\"http://www.projx.it/download/org.projx.transfer_1.2.0.jar\">下载</a>', '2012-02-02 20:54:20', '2', null);
INSERT INTO `blog_post` VALUES ('131', '2', '更改 eclipse svn 插件显示语言', 'eclipse 的默认显示语言为英文，安装 svn 插件后，\n\nsvn 的默认显示语言为中文，可以通过如下方式修改为英文：\n\n找到：eclipseconfigurationconfig.ini\n\n添加：osgi.nl=en_US\n\n<!--more-->', '2012-02-02 20:42:44', '2', null);
INSERT INTO `blog_post` VALUES ('150', '2', '系统错误：无法启动此程序，因为计算机中丢失 MSVCR100.dll', '错误1：无法启动此程序，因为计算机中丢失 MSVCR100.dll。尝试重新安装该程序以解决此问题。\n\n错误2：C:Windowssystem32MSVCR100.dll 没有被指定在 Windows 上运行，或者它包含错误，\n\n请尝试使用原始安装媒体重新安装程序，或联系您的系统管理员或软件供应商以获取支持。\n\n解决办法：安装 Visual C++ 库的运行时组件\n\n下载地址：<a title=\"Microsoft Visual C++ 2010 可再发行组件包 (x86)\" href=\"http://www.microsoft.com/downloads/zh-cn/details.aspx?FamilyID=A7B7A05E-6DE6-4D3A-A423-37BF0912DB84\" target=\"_blank\">Microsoft Visual C++ 2010 可再发行组件包 (x86)</a> <a href=\"http://115.com/file/bejxu2vl\" target=\"_blank\">下载地址2</a>', '2012-02-10 18:43:13', '2', null);
INSERT INTO `blog_post` VALUES ('151', '2', 'SecureCRT 6.7 注册机', '<p>\n	测试版本：SecureCRT 6.7.4\n</p>\n<p>\n	软件首页：<a href=\"http://www.vandyke.com/download/securecrt/download.html\" target=\"_blank\">SecureCRT (non-integrated)</a> \n</p>\n<p>\n	帐号密码：zhanqi0404@163.com/zhanqi0404\n</p>\n<p>\n	注册机下载：<a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/SecureCRT.6.X.KeyGen.zip\">SecureCRT.6.X.KeyGen</a> \n</p>\n<p>\n	错误处理：<a title=\"系统错误：无法启动此程序，因为计算机中丢失 MSVCR100.dll\" href=\"http://zhanqi.net/blog/150/\" target=\"_blank\">计算机中丢失 MSVCR100.dll</a> \n</p>\n<p>\n	注册步骤：\n</p>\n<p>\n	1：安装 SecureCRT\n</p>\n<p>\n	2：复制&nbsp;SecureCRT.6.X.Keygen.exe 到&nbsp;SecureCRT 安装目录\n</p>\n<p>\n	3：启动注册机，输入注册信息，点击 Patch\n</p>\n<p>\n	4：点击 Generate，生成序列号跟 Licence\n</p>\n<p>\n	5：启动&nbsp;SecureCRT，按照步骤输入注册信息\n</p>\n<p>\n	6：完成注册\n</p>\n<p>\n	<a href=\"http://zhanqi-image.stor.sinaapp.com/post/151.png\" target=\"_blank\" class=\"highslide\"><img alt=\"img\" src=\"\" data-original=\"http://zhanqi-image.stor.sinaapp.com/post/151.png\" class=\"lazy\" /></a> \n</p>', '2012-02-10 19:31:16', '2', null);
INSERT INTO `blog_post` VALUES ('157', '2', 'VMware Workstation 8 注册机', '<p>\n	测试版本：8.0.2-591240\n</p>\n<p>\n	软件下载：<a title=\"vmware workstation 8\" href=\"http://downloads.vmware.com/d/info/desktop_end_user_computing/vmware_workstation/8_0\" target=\"_blank\">软件首页</a> <a href=\"https://download2.vmware.com/software/wkst/VMware-workstation-full-8.0.2-591240.exe?HashKey=21155604dfafd303c5706ccae73a8a9d&ext=.exe&AuthKey=1328865023_6df357bcfa0fe4b1371677c7bc067ef5&ext=.exe \" target=\"_blank\">迅雷下载</a> \n</p>\n<p>\n	帐号密码：zhanqi0404@163.com/zhanqi0404\n</p>\n<p>\n	注册机：<a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/VMware-Workstation-8-KeyGen.zip\">下载</a> \n</p>\n<p>\n	序列号：\n</p>\n<p>\n	0V6UY-4Z29L-8ZNQ1-R80QK-ACWL6\n</p>\n<p>\n	HU4R3-FEKDP-GZDQ1-Z90Q4-0CQH8\n</p>\n<p>\n	4A25F-4010Q-5ZQJ9-21CNH-AATJH\n</p>\n<p>\n	<img data-original=\"http://zhanqi-image.stor.sinaapp.com/post/157.png\" src=\"\" alt=\"img\" class=\"lazy\" /> \n</p>', '2012-02-11 19:20:03', '2', null);
INSERT INTO `blog_post` VALUES ('169', '2', 'UltraEdit 17 注册机', '<p>\n	测试版本：17.30.0.1014\n</p>\n<p>\n	软件下载：<a href=\"http://www.ultraedit.com/downloads/ultraedit_download.html\" target=\"_blank\">软件首页</a> \n</p>\n<p>\n	注册机：<a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/UltraEdit-17-KeyGen.zip\">下载</a> \n</p>\n<p>\n	注册步骤：\n</p>\n<p>\n	1：<span style=\"color:#ff0000;\">断开网络</span> \n</p>\n<p>\n	2：帮助-注册/激活，不需要输入许可证ID，密码，点击激活\n</p>\n<p>\n	3：提示侦测不到互联网连接，点击脱机激活\n</p>\n<p>\n	4：输入许可证ID，密码，随便输入\n</p>\n<p>\n	5：打开注册机，输入用户码1，用户码2\n</p>\n<p>\n	6：输入生成验证码，点击激活即可\n</p>\n<p>\n	<img data-original=\"http://zhanqi-image.stor.sinaapp.com/post/169.png\" src=\"\" alt=\"img\" class=\"lazy\" />\n</p>\n<p>\n	<img data-original=\"http://zhanqi-image.stor.sinaapp.com/post/169-1.png\" src=\"\" alt=\"img\" class=\"lazy\" /> \n</p>', '2012-02-21 09:16:19', '2', null);
INSERT INTO `blog_post` VALUES ('234', '2', 'Win7 激活工具 Windows Loader', '<p>\n	测试版本：Win7 Ultimate SP1 (x86)\n</p>\n<p>\n	测试机器：DELL ThinkPad\n</p>\n<p>\n	注册机下载：<a href=\"http://forums.mydigitallife.info/threads/26994\" target=\"_blank\">官网</a> <a href=\"http://zhanqi-file.stor.sinaapp.com/keygen/Windows-Loader-v2.1.7.zip\">Windows Loader v2.1 - By Daz</a> \n</p>\n<p>\n	激活步骤：\n</p>\n<p>\n	1：右键以管理员身份运行\n</p>\n<p>\n	2：Install\n</p>\n<p>\n	<img src=\"\" data-original=\"http://zhanqi-image.stor.sinaapp.com/post/234.png\" alt=\"img\" class=\"lazy\" /> \n</p>', '2012-03-03 22:05:31', '2', null);
INSERT INTO `blog_post` VALUES ('287', '2', 'Jsp/Servlet + POI 导出 Excel', '测试环境 Servlet/Struts2 + POI 3.7\n\n支持导出 Excel2003/2007 格式，导出文件名支持中文，无乱码\n\n更多详情见代码及方法注释，附：<a href=\"http://poi.apache.org/download.html\" target=\"_blank\">POI下载</a> <a href=\"http://poi.apache.org/spreadsheet/quick-guide.html\" target=\"_blank\">POI操作指南</a>\n<pre class=\"brush:java\">/** \n * Jsp/Servlet + POI 导出 Excel \n *  \n * @param response  HttpServletResponse \n * @param wb  HSSFWorkbook/XSSFWorkbook \n * @param fileName  xxx.xls(97-03)/xxx.xlsx(07-10) \n * @throws IOException \n */ \npublic static void exportExcel(HttpServletResponse response, Workbook wb, \n        String fileName) throws IOException { \n\n    // 如果文件名有中文，必须URL编码 \n    fileName = URLEncoder.encode(fileName, \"UTF-8\"); \n    response.reset(); \n\n    // ContentType 可以不设置 \n    response.setContentType(\"application/vnd.ms-excel;charset=UTF-8\"); \n    response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + fileName); \n\n    wb.write(response.getOutputStream()); \n	\n    response.getOutputStream().flush(); \n    response.getOutputStream().close(); \n}</pre>', '2012-03-11 12:09:05', '2', null);
INSERT INTO `blog_post` VALUES ('307', '2', 'Windows Dos 批处理常用命令', '<p>@：屏蔽\r\n>\r\n>> 重定向1\r\n< 重定向2\r\n|管道\r\n^转义\r\n& && ||\r\n1：echo\r\n2：rem\r\n3：pause\r\n4：call\r\n5：start\r\n6：goto\r\n7：set\r\nif\r\nfor\r\nshift</p>\r\n<p>变量</p>\r\n<p> </p>\r\n<p><img class=\"alignnone\" src=\"http://img.u.115.com/thumb/3/19/DC/319DC70E2C7B38987FD0D26C36F76053303B336E_1440_900?s=JCdsmZr2nABNAxYlkhzKdA&t=1336320000\" alt=\"\" width=\"1440\" height=\"900\" /></p>\r\n', '2012-05-06 08:04:56', '2', '');
INSERT INTO `blog_post` VALUES ('317', '2', '域名查询接口-万网免费版', '万网域名查询接口，可查询域名是否已被注册\n因为是免费的，所以如果查询频率过高，可能会被封IP\n接口1：<a href=\"http://pandavip.www.net.cn/check/check_ac1.cgi?domain=zhanqi.net\" target=\"_blank\">http://pandavip.www.net.cn/check/check_ac1.cgi?domain=zhanqi.net</a> 返回值1：\n<blockquote>\n	(\"net|zhanqi.net|211|Domain name is not available\");\n(\"mobi|zhanqi.mobi|210|Domain name is available\");\n</blockquote>\n接口2：<a href=\"http://panda.www.net.cn/cgi-bin/check.cgi?area_domain=zhanqi.net\" target=\"_blank\">http://panda.www.net.cn/cgi-bin/check.cgi?area_domain=zhanqi.net</a> 返回值2：\n<pre class=\"prettyprint lang-xml brush:xml\"><!--?xml version=\"1.0\" encoding=\"gb2312\"?--> \n<property> \n   <returncode>200</returncode> \n   <key>zhanqi.me</key> \n   <original>211 : Domain name is not available</original> \n</property></pre>\n附java实现代码：<a href=\"http://hc.apache.org/downloads.cgi\" target=\"_blank\">HttpClient</a> \n<pre class=\"prettyprint lang-java brush:java\">public static void main(String[] args) throws Exception { \n\n   HttpClient httpclient = new DefaultHttpClient(); \n   ResponseHandler<string> responseHandler = new BasicResponseHandler(); \n\n   String url = \"http://panda.www.net.cn/cgi-bin/check.cgi?area_domain=zhanqi.net\"; \n   url = \"http://pandavip.www.net.cn/check/check_ac1.cgi?domain=zhanqi.net\"; \n\n   HttpGet get = new HttpGet(url); \n   get.setURI(URI.create(url)); \n\n   String responseBody = httpclient.execute(get, responseHandler); \n   System.out.println(responseBody); \n}</string></pre>', '2012-03-18 23:30:00', '2', null);
INSERT INTO `blog_post` VALUES ('337', '2', 'Html 特殊转义字符列表', '<pre class=\"prettyprint lang-java\">\n/**\n * Jsp/Servlet + POI 导出 Excel\n * \n * @param response\n *            HttpServletResponse\n * @param wb\n *            HSSFWorkbook/XSSFWorkbook\n * @param fileName\n *            xxx.xls(97-03)/xxx.xlsx(07-10)\n * @throws IOException\n */\npublic static void exportExcel(HttpServletResponse response, Workbook wb,\n        String fileName) throws IOException {\n    // 如果文件名有中文，必须URL编码\n    fileName = URLEncoder.encode(fileName, \"UTF-8\");\n    response.reset();\n    // ContentType 可以不设置\n    response.setContentType(\"application/vnd.ms-excel;charset=UTF-8\");\n    response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + fileName);\n    wb.write(response.getOutputStream());\n    response.getOutputStream().flush();\n    response.getOutputStream().close();\n}\n</pre>', '2012-05-06 07:28:22', '2', null);
INSERT INTO `blog_post` VALUES ('343', '2', '联想笔记本电脑删除隐藏分区', '<p>\n	删除 Lenovo OEM 分区，禁止一键恢复功能。大约14.5G，请慎重操作，以免误删！\n</p>\n<p>\n	以下步骤在 Win7 测试通过，XP应该差不多：\n</p>\n<p>\n	1：找到 附件--命令提示符--以管理员身份运行，进入命令行界面\n</p>\n<p>\n	2：diskpart，进入磁盘分区管理器界面\n</p>\n<p>\n	3：rescan，扫描配置\n</p>\n<p>\n	4：list disk，列出可用磁盘\n</p>\n<p>\n	5：select disk 0，选择磁盘，0 为 ### 对应值\n</p>\n<p>\n	6：list partition，列出所有分区\n</p>\n<p>\n	7：select partition 0，选择分区，0 为 ### 对应值\n</p>\n<p>\n	8：delete partition override，删除隐藏分区，请慎重！\n</p>\n<p>\n	9：删除后就可以去 计算机--管理--磁盘管理，使用图形化界面操作分区。\n</p>', '2012-03-20 15:15:34', '2', null);
INSERT INTO `blog_post` VALUES ('357', '2', 'jQuery.extend - jQuery.fn.extend', 'jQuery.extend = jQuery.fn.extend = function(deep, target, options...){}\r\n\r\njQuery.extend 是函数静态方法，this作用域是指向jQuery；\r\n\r\njQuery.fn.extend 是对象方法，this作用域指向jQuery对象；\r\n\r\n参数不同，功能也有些不同；参数类型不同，功能也有差异；\r\n\r\n基本功能：扩展对象的属性和方法；\r\n\r\n注意：\r\n\r\n1：该方法没有是否覆盖选项，所以遇到重名属性，将会被覆盖！\r\n\r\n2：参数至少提供一个 Object 或 Function，不然没有意义！\r\n\r\n用法有 3 种情况，以下给出参数说明：\r\n\r\n1：扩展 jQuery函数 或 jQuery对象，这个时候参数有且只有一个 Object 或 Function，目标对象默认为 this；\r\n\r\n2：扩展指定对象，这个时候参数至少有两个 Object 或 Function，第一个作为目标对象，待返回对象，将拥有之后的对象的属性；\r\n\r\n3：递归扩展，这个时候第一个参数必须为 boolean 类型，之后的参数又按照上述1，2的规则；\r\n\r\n说明：什么时候使用deep这个参数呢？当目标对象的一个属性也是一个对象，同时源对象的这个属性也是一个对象的时候，这个时候如果被覆盖了，应该不是你想要的结果吧！这个时候如果deep=true，就会对该属性对象进行单独的extend，这样就有可能保留该属性对象的属性。\r\n\r\n例如：\r\n<pre class=\"brush:js\">var o1 = {\r\n    name: \'o1\',\r\n    child: {\r\n        name: \'c2\',\r\n        age: 111\r\n    }\r\n};\r\nvar o2 = {\r\n    name: \'o2\',\r\n    child: {\r\n        name: \'c2\'\r\n    }\r\n};\r\n\r\njQuery.extend(true, o1, o2);</pre>\r\n这个时候，就可以保留第一个对象的child的age了。', '2012-04-03 14:56:49', '2', null);
INSERT INTO `blog_post` VALUES ('359', '2', 'jQuery.merge', 'jQuery.merge = function(first, second){}\n\n功能：连接两个数组，不覆盖\n\n与 Array.prototype.concat(first, second...) 的区别\n\n1：concat 不会影响first数组，merge 则是对first数组本身的操作；\n\n2：concat 支持连接多个数组；\n\n3：merge的first，second还可以是 Object，不过最好不要传入。\n\nmerge 也可以实现连接而不影响first数组：\n\nvar newArray = $.merge( $.merge([], first), second);\n\n', '2012-04-03 15:39:49', '2', null);
INSERT INTO `blog_post` VALUES ('360', '2', 'jQuery.inArray', 'jQuery.inArray = function( elem, array, i )\n\n功能：实现 Array.prototype.indexOf 的一个浏览器兼容\n\n返回值：返回该元素的位置，如果没找到，则返回 -1；\n\n第三个参数说明：查找的起始位置；\n\n比如：jQuery.inArray(5, [7, 5, 8, 3], 2);\n\n5 的位置是 1，但是从位置 2 开始找，是找不到的。 ', '2012-04-03 15:55:11', '2', null);
INSERT INTO `blog_post` VALUES ('361', '2', 'jQuery.grep', 'jQuery.grep = function( elems, callback, inv ){}\n\n功能：条件过滤，返回新的结果数组\n\n过滤规则：\n\n1：一般不提供第三个参数，如果callback返回true或真值，当前元素就会被添加到结果数组;\n\n2：如果第三个参数为false，或不提供，则如果callback返回true或真值，当前元素就会被添加到结果数组；\n\n3：如果第三个参数为true，或真值，则如果callback返回false或假值，当前元素才会被添加到结果数组；\n\n注意：\n\n1：只能过滤数组，不能过滤对象；\n\n2：因为第三个参数会强制转换为boolean类型，所以建议为true|false，不提供则为false；\n\n3：因为第callback的返回值会强制转换为boolean类型，所以建议返回true|false，不返回则为false；\n\n4：过滤的过程中，不会因为callback的返回值为false而中断；\n\n5：callback 函数接收的参数第一个是元素的值，第二个才是索引；\n\n6：callback函数的this作用域为window；', '2012-04-08 15:12:03', '2', null);
INSERT INTO `blog_post` VALUES ('362', '2', 'jQuery.map', 'jQuery.map = function( elems, callback, arg ){}\r\n\r\n功能：对数组元素或对象属性调用callback之后，存储callback返回值，返回callback返回值数组\r\n\r\n注意：\r\n\r\n1：对元素的操作会影响该元素本身；\r\n\r\n2：循环过程不会因为callback的返回值为false而中断；\r\n\r\n3：只有callback返回值不为null，才会被存储到结果数组；\r\n\r\n4：callback接收的第一个参数为元素值，第二个参数为索引或键值；\r\n\r\n5：callback函数的this作用域为window；\r\n\r\n6：第三个参数 arg 依然作为第三个参数传递给 callback；', '2012-04-11 09:41:07', '2', null);
INSERT INTO `blog_post` VALUES ('363', '2', 'jQuery.each', 'jQuery.each = function( object, callback, args ) {}\n\n功能：遍历数组或对象\n\n注意：\n\n1：如果有第三个参数，则必须为数组类型；\n\n2：如果callback返回值===false，会终止遍历；\n\n3：callback函数接收的参数，第一个为索引或键值，第二个为元素值或属性值；\n\n4：callback函数的this作用域为当前元素；', '2012-04-06 17:03:41', '2', null);
INSERT INTO `blog_post` VALUES ('364', '2', 'jQuery.proxy', '函数：jQuery.proxy \r\n\r\n<pre class=\"brush:js\">jQuery.proxy = function( fn, context ){}\r\n\r\n// fn = context[name]\r\njQuery.proxy = function( context, name ){}</pre>\r\n功能：把一个函数跟作用域绑定，返回一个新的函数\r\n\r\n原理：利用闭包，每产生一个proxy，其作用域就可以常驻内存\r\n\r\n用法：在绑定事件的时候，可以永久指定this，不随绑定对象而改变\r\n\r\n例如：\r\n<pre class=\"brush:js\">var obj = {\r\n    name: \"John\",\r\n    test: function() {\r\n      $(\"#log\").append( this.name );\r\n      $(\"#test\").unbind(\"click\", obj.test);\r\n    }\r\n};\r\n$(\"#test\").click( jQuery.proxy( obj, \"test\" ) );</pre>\r\n问题：proxy返回的是一个新函数，为什么依然可以取消绑定？', '2012-04-07 12:56:21', '2', null);
INSERT INTO `blog_post` VALUES ('365', '2', 'jQuery.Callbacks', 'jQuery.Callbacks = function( flags ) {}\n\n功能：生成一个可操作的函数队列，可控制，增加，删除，执行队列里的函数\n\n参数：可以由4个字符串任意用空格组合，\'once memory unique stopOnFalse\'\n\n1：once：函数队列是否只能fire一次；\n\n2：memory：每次fire的时候，是否记录 [context, args]，如果记录，则在add函数的时候就会fire；\n\n3：unique：往队列add函数的时候，如果已存在，则不添加，什么也不会发生；\n\n4：stopOnFalse：如果队列里的某一个函数执行后返回值===false，则队列中往后的函数将不被执行；\n\n方法说明：\n\n1：add：往队列添加函数，可以一次add多个函数，逗号分隔，或数组都可以；如果有flags.memory，且该函数队列有fire过一次，add完就会马上fire；\n\n2：fireWith：如果有flags.once，fireWith只能触发一次；\n\n注意：\n\n1：被添加到队列中的函数，有可能执行add，remove，fire等操作，需要注意！', '2012-04-07 10:45:27', '2', null);
INSERT INTO `blog_post` VALUES ('382', '2', 'Html Element nodeType', '<h4 class=\"subtitle\">HTMLElement.nodeType，方便查阅</h4>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>NodeType</th>\r\n<th>NodeType</th>\r\n</tr>\r\n</tbody>\r\n<tbody>\r\n<tr>\r\n<td>ELEMENT_NODE</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>ATTRIBUTE_NODE</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td>TEXT_NODE</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td>CDATA_SECTION_NODE</td>\r\n<td>4</td>\r\n</tr>\r\n<tr>\r\n<td>ENTITY_REFERENCE_NODE</td>\r\n<td>5</td>\r\n</tr>\r\n<tr>\r\n<td>ENTITY_NODE</td>\r\n<td>6</td>\r\n</tr>\r\n<tr>\r\n<td>PROCESSING_INSTRUCTION_NODE</td>\r\n<td>7</td>\r\n</tr>\r\n<tr>\r\n<td>COMMENT_NODE</td>\r\n<td>8</td>\r\n</tr>\r\n<tr>\r\n<td>DOCUMENT_NODE</td>\r\n<td>9</td>\r\n</tr>\r\n<tr>\r\n<td>DOCUMENT_TYPE_NODE</td>\r\n<td>10</td>\r\n</tr>\r\n<tr>\r\n<td>DOCUMENT_FRAGMENT_NODE</td>\r\n<td>11</td>\r\n</tr>\r\n<tr>\r\n<td>NOTATION_NODE</td>\r\n<td>12</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 class=\"subtitle\">原文</h4>\r\n\r\n<!--more-->\r\n\r\n<blockquote>ELEMENT_NODE: 1\r\nATTRIBUTE_NODE: 2\r\nTEXT_NODE: 3\r\nCDATA_SECTION_NODE: 4\r\nENTITY_REFERENCE_NODE: 5\r\nENTITY_NODE: 6\r\nPROCESSING_INSTRUCTION_NODE: 7\r\nCOMMENT_NODE: 8\r\nDOCUMENT_NODE: 9\r\nDOCUMENT_TYPE_NODE: 10\r\nDOCUMENT_FRAGMENT_NODE: 11\r\nNOTATION_NODE: 12\r\n\r\n// 以下未知，请勿对号入座\r\nDOCUMENT_POSITION_DISCONNECTED: 1\r\nDOCUMENT_POSITION_PRECEDING: 2\r\nDOCUMENT_POSITION_FOLLOWING: 4\r\nDOCUMENT_POSITION_CONTAINS: 8\r\nDOCUMENT_POSITION_CONTAINED_BY: 16\r\nDOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32</blockquote>', '2012-04-08 21:47:36', '2', null);
INSERT INTO `blog_post` VALUES ('386', '2', 'js 数组去除重复元素', '<pre class=\"brush:js\">// 摘自 jQuery-1.7.2.js\nvar ret = this.pushStack( \'\', \'find\', selector ),\n    length, n, r;\n\nfor ( i = 0, l = this.length; i &lt; l; i++ ) {\n     length = ret.length;\n     jQuery.find( selector, this[i], ret );\n     if ( i &gt; 0 ) {\n        // Make sure that the results are unique\n        for ( n = length; n &lt; ret.length; n++ ) {\n            for ( r = 0; r &lt; length; r++ ) {\n                if ( ret[r] === ret[n] ) {\n                    ret.splice(n–, 1);\n                    break;\n                }\n            }\n        }\n    }\n}</pre>', '2012-04-12 17:24:21', '2', null);
INSERT INTO `blog_post` VALUES ('388', '2', 'jQuery pushStack', 'pushStack(elems, name, selector)\n\n功能：返回一个新的，拥有elems的jQuery对象\n\n参数说明：\n\n1：elems：压入jQuery对象的DOMElement数组；\n\n2：name：数组elems的来源，比如：find，filter；\n\n3：selector：数组elems的具体来源，也就是find，filter的具体内容；', '2012-04-12 18:03:32', '2', null);
INSERT INTO `blog_post` VALUES ('457', '2', '新浪微博架构', '首先给大家介绍一下微博架构发展的历程。新浪微博在短短一年时间内从零发展到五千万用户，我们的基层架构也发展了几个版本。第一版就是是非常快的，我们可以非常快的实现我们的模块。我们看一下技术特点，微博这个产品从架构上来分析，它需要解决的是发表和订阅的问题。我们第一版采用的是推的消息模式，假如说我们一个明星用户他有10万个粉丝，那就是说用户发表一条微博的时候，我们把这个微博消息攒成10万份，这样就是很简单了，第一版的架构实际上就是这两行字。第一颁的技术细节，典型的LAMP架构，是使用Myisam搜索引擎，它的优点就是速度非常快。另外一个是MPSS，就是多个端口可以布置在服务器上。为什么使用MPSS？假如说我们做一个互联网应用，这个应用里面有三个单元，我们可以由三种部署方式。我们可以把三个单元部署在三台服务器上，另外一种部署模式就是这三个单元部署在每个服务器上都有。这个解决了两个问题，一个是负载均衡，因为每一个单元都有多个结点处理，另外一个是可以防止单点故障。如果我们按照模式一来做的话，任何一个结点有故障就会影响我们系统服务，如果模式二的话，任何一个结点发生故障我们的整体都不会受到影响的。\r\n\r\n<!--more-->\r\n\r\n我们微博第一版上线之后，用户非常喜欢这个产品，用户数增长非常迅速。我们技术上碰到几个问题。第一个问题是发表会出现延迟现象，尤其是明星用户他的粉丝多。另外系统处理明星用户发表时候的延迟，可能会影响到其他的用户，因为其他的用户同一时间发表的话，也会受到这个系统的影响。我们就考虑这个系统怎么改进。首先是推模式，这肯定是延迟的首要原因，我们要把这个问题解决掉。其次我们的用户越来越多，这个数据库表从一百万到一亿，数据规模不一样处理方式是有差别的。我们第一版单库单表的模式，当用户数量增多的时候，它不能满足就需要进行拆分。第二个是锁表的问题，我们考虑的是更改引擎。另外一个是发表过慢，我们考虑的是异步模式。\r\n\r\n第二版我们进行了模块化，我们首先做了一个层，做了拆分，最右边的发表做了异步模式。第二个服务层，我们把微博基础的单元设计成服务层一个一个模块，最大是对推模式进行了改进。首先看一下投递模式的优化，首先我们要思考推模式，如果我们做一下改进把用户分成有效和无效的用户。我们一个用户比如说有一百个粉丝，我发一条微博的时候不需要推给一百个粉丝，因为可能有50个粉丝不会马上来看，这样同步推送给他们，相当于做无用功。我们把用户分成有效和无效之后，我们把他们做一下区分，比如说当天登陆过的人我们分成有效用户的话，只需要发送给当天登陆过的粉丝，这样压力马上就减轻了，另外投递的延迟也减小了。\r\n\r\n我们再看数据的拆分，数据拆分有很多方式，很多互联网产品最常用的方法，比如说如可以按照用户的UID来拆分。但是微博用户的一个特点就是说大家访问的都是最近的服务器，所以我们考虑微博的数据我们按照时间拆分，比如说一个月发一张表，这样就解决了我们不同时间的惟度可以有不同的拆分方式。第二个考虑就是要把内容和索引分开存放。假如说一条微博发表的地址是索引数据，内容是内容数据。假如说我们分开的话，内容就简单的变成了一种key-value的方式，key-value是最容易扩展的一种数据。比如说一个用户发表了一千条微博，这一千条微博我们接口前端要分页放，比如说用户需要访问第五页，那我们需要迅速定位到这个记录。假如说我们把这个索引拆分成一个月一张表，我们记录上很难判断第五页在哪张表里，我们需要索引所有的表。如果这个地方不能拆分，那我们系统上就会有一个非常大的瓶颈。最后我们想了一个方法，就是说索引上做了一个二次索引，改变我们还是按照时间拆分，但是我们把每个月记录的偏移记下来，就是一个月这个用户发表了多少条，ID是哪里，就是按照这些数据迅速把记录找出来。\r\n\r\n异步处理，发表是一个非常繁重的操作，它要入库、统计索引、进入后台，如果我们要把所有的索引都做完用户需要前端等待很长的时间，如果有一个环节失败的话，用户得到的提示是发表失败，但是入库已经成功。所以我们做了一个异步操作，就是发表成功我们就提示成功，然后我们在后台慢慢的消息队列慢慢的做完。另外新浪发表了一个很重要的产品叫做MemcacheQ，我们去年做了一个对大规模部署非常有利的指令，就是stats queue，适合大规模运维。\r\n\r\n第二版我们做了这些改进之后，微博的用户和访问量并没有停止，还有很多新的问题出现。比如说系统问题，单点故障导致的雪崩，第二个是访问速度问题因为国内网络环境复杂，会有用户反映说在不同地区访问图片、js这些速度会有问题。另外一个是数据压力以及峰值，MySql复制延迟、慢查询，另外就是热门事件，比如说世界杯，可能会导致用户每秒发表的内容达到几百条。我们考虑如何改进，首先系统方面循序任意模块失败。另外静态内容，第一步我们用CDN来加速，另外数据的压力以及峰值，我们需要将数据、功能、部署尽可能的拆分，然后提前进行容量规划。\r\n\r\n另一方面我们还有平台化的需求，去年11月我们就说要做开放平台，开放平台的需求是有差异的，Web系统它有用户行为才有请求，但是API系统特别是客户端的应用，只要用户一开机就会有请求，直到他关闭电脑这种请求一直会不间断的过来，另外用户行为很难预测。\r\n\r\n系统规模在持续的增大，另外也有平台化的需求，我们新架构应该怎么做才能满足这些需要？我们看一下同行，比如说Google怎么样考虑这个问题的？Google首席科学家讲过一句话，就是一个大的复杂的系统，应该要分解成很多小的服务。比如说我们在Google.com执行一个搜索查询的话，实际上这个操作会调动内部一百多个服务。因此，我们第三版的考虑就是先有服务才有接口最后才有应用，我们才能把这个系统做大。\r\n\r\n现在我们看一下第三版，首先我们把底层的东西分成基础服务，基础服务里面比如说分布式的存储，还有分层，我们做了一些去中心化、自动化的操作。在基础服务之上有平台服务，我们把微博常用的应用做成各种小的服务。然后我们还有应用服务，这个是专门考虑平台各种应用的需求。最上面我们有API，API就是新浪微博各种第三方应用都在上面跑。四\r\n\r\n平台服务和应用服务是分开的，这样实现了模块隔离，即使应用服务访问量过大的话，平台服务不会首先影响。另外我们把微博的引擎进行了改进，实现了一个分层关系。用户的关注关系，我们改成一个多惟度的索引结构，性能极大的提高。第四个层面就是计数器的改进，新版我们改成了基于偏移的思路，就是一个用户他原来读的一个ID比如说是10000，系统最系的ID是10002的话，我们和清楚他有两条未读。原来的版本是采用绝对技术的，这个用户有几条未读都是用一个存储结构的话，就容易产生一致性的问题，采用这种偏移的技术基本上不会出错。\r\n\r\n另外基础服务DB冷热分离多维度拆分，在微博里面我们是按照时间拆分的，但是一个大型的系统里面有很多业务需要有不同的考虑。比如说私信这个就不能按照时间来拆分，这个按照UID来拆分可能更简单。然后我们突出存储还做了一个去中心化，就是用户上传图片的速度会极大的提高，另外察看其他用户的图片速度也会极大的提高。另外是动态内容支持多IDC同时更新，这个是在国内比较新颖的。\r\n\r\n下面给大家介绍一下新浪微博怎么样打造一个高性能架构。到目前为止有五千万用户使用新浪微博，最高发表3000条以上每秒，然后一个明星用户发表的话，会被几百万用户同时读到。这些问题的本质是我们架构需要考虑高访问量、海量数据的情况下三个问题。易于扩展、低延迟、高可用和异地分布。我们每天有数十亿次外部网页以及API接口的需求，我们知道微博的特点是用户请求是无法cache的。因此面对这个需求我们怎么样扩展？几点思路。第一我们的模块设计上要去状态，我们任意一个单元可以支持任意节点。另外是去中心化，避免单点及瓶颈。另外是可线性扩展。最后一个是减少模块。\r\n\r\n我们要做一个高性能的系统，要具备一个低延迟、高实时性，微博要做到高实时性这是核心的价值，实时性的核心就是让数据离CPU最近，避免磁盘的IO。我们看淘宝核心系统专家余锋说过的一句话“CPU访问L1就像从书桌拿一本书，L2是从书架拿一本书，L3是从客厅桌子上拿一本书，访问主存就像骑车去社区图书馆拿一书”。我们微博如果要做到非常实时的话，我们就需要把数据尽量离CPU节点最近。所以我们看一下cache设计里面怎么达到这个目标。首先INBOX，这个数据我们需要放再一个最快的地方，因为用户随时访问。OutBOX里面的最近发表就是L1cache，还有一个是中期的，这个因为访问少一点，它可以被踢。最后一部分内容体有三部分。L0是本地的，我们需要把一些经常访问的，比如说明星发表微博的内容体本地化，因为它被访问的概率非常大。然后L1里面存放着最近发表的，还有一个是中期的。我们通常用L2就可以了，L1我们可以理解成它就是一个存储。\r\n\r\n一个好的架构还需要举行高可用性。我们看一下业界的指标，S3是99.9%，EC2是99.5%，我们另外一个同行Face book在这方面它是没有承诺的，就是接口可用写。微博平台目前承诺的是99.95%，就是说一天365天故障率应该小于9个小时。这个怎么达到？第一我们要做容量规划，地个是要做好监控以及入口的管理，就是说有些服务如果访问量过了的话，我们要有一个开关可以拦住他。我们通过这个图表可以清楚的看到，比如说我们要做L1的cache，我们剩余空间有多少，比如说80%，就说明这个数据有可能会丢失，有可能会对我们的系统造成影响。\r\n\r\n另外一个层面就是接口监控，我们目前有Google维度的接口监控，包括访问错误失败率。然后要做架构，给大家一个很重要的经验分享，就是说监控的指标尽量量化。比如说他延迟30秒是小问题，如果是延迟10分钟我们就要立即采取措施了，就是所有可以量化的指标都要量化。\r\n\r\n然后我们看监控怎么样更好的做？我们看亚马逊的VP说过的一句话，就是说监控系统确实特别好，可以立即告诉我们哪里有故障，但是有20%的概率我们人是会出错的。所以我们一个大型系统就应该要为自动化设计，就是说尽可能的将一些运作自动化。比如说发布安装、服务、启用、停止。我们再看另外一句，Google的工程师是怎么做的。他是这么做的，比如说第一周是处理线上的业务，这一周他处理了很多事情，处理了很多系统的情况，剩下的系统问题是不需要他做的，他只要把这一周碰到的情况用程序的方法来解决，下次再碰到这种情况很简单的一个按钮就可以处理了。我们目前也在向自动化这方面努力，就是我们的工具在持续增加。\r\n\r\n另外一个异地分布，在国内网络环境下，比如说IDC灾难，机房检修甚至是机房掉电，我们也碰到过中国最好的机房也会掉电，所以要每个服务单元都能支持多机房部署。另外做多机房部署有一个好处，就是用户的访问速度会提高。多IDC分布静态内容就不说了，基本上大的互联网公司都会做，它非常成熟基本上没有什么问题，比如说图片等等的静态内容。动态内容的CDN分布是业内的难点，国内很少有公司能够做到非常成熟的多机房动态内容发布的成熟方案，它的核心就是分布式存储。一款理想的分布式存储产品它有哪些需求呢？首先它要支持海量规模、可扩展、高性能、低延迟、高可用。第二个是需要多机房分布，能够满足国内负责的网络环境，还要具备异地容灾能力。第三个就是要调用简单，具备丰富数据库特性。因此分布式存储需要解决一个多对多的数据复制。\r\n\r\n如果要做复制无非是三种策略，第一个是Master/Slave，但是它也两个缺点，第一个是Master是中心化的，如果Master在北京那广州访问就非常慢。第二个缺点是有单点风险的，比如说Master在北京，能立即迁到广州吗？这样时间窗口就丢失了，而且需要人工的干预，而且日常广州的用户访问北京的Master是有很大问题的，所以一般来说要做的非常优秀是不会考虑第一种方案的。第二种就是Multi-Master方案，它需要应用避免冲突，就是我们不能多处改变。这个对于微博来说不会特别难，我们的用户通常只会再一个地方发表微博，很难既在广州又在北京发表或者是修改自己的资料，这样的话我们应用上就可以避免这种情况。第三个就是Paxos就是可以达到强一致写，就是一条数据如果成功肯定是多个机房都成功了，这个也显而易见就是延迟性非常大。因此总结一下Multi-Master是最成熟的策略，但是它现在没有成熟的产品，因为确实没有。\r\n\r\n我们再来看微博的方案，所以我们自己实现了一个多机房同步的方案。就是我们前端应用将数据写到数据库，再通过一个消息代理，相当于通过我们自己开发的一个技术，将数据广播到多个机房。这个不但可以做到两个机房，而且可以做到三个、四个。具体的方式就是通过消息广播 方式将数据多点分布，就是说我们的数据提交给一个代理，这个代理帮我们把这些数据同步到多个机房，那我们应用不需要关心这个数据是怎么样同步过去的。\r\n\r\n用这种消息代理方式有什么好处呢？可以看一下Yahoo是怎么来做的？第一个是数据提供之后没有写到db之后是不会消失的，我只要把数据提交成功就可以了，不需要关心数据怎么到达机房。第二个特点YMB是一款消息代理的产品，但是它唯一神奇的地方是为广域网设计的，它可以把多机房应用归到内部，我们应用不需要关注这个问题。这个原理跟我们目前自己开发的技术相似。\r\n\r\n然后我们再看一下目前即将推出的微博平台的新架构。我们知道API大部分的请求都为了获取最新的数据。API请求有一个特点，它大目前调用都是空返回的，比如说一款手机的客户端每隔一分钟它都要调用服务器一下，就是有没有新数据，目前的调用都是空返回，就是说不管服务器有没有数据都要调用一次。这次询问到下一次询问中间，如果有新的数据来了，你是不会马上知道的。因此我们想API能不能改用推的方式，就是客户端不需要持续的调用，如果有新数据就会推过去。技术特点，显而易见低延迟，就是从发表到接受1秒内完成，实际上可能用不了1秒。然后服务端的连接就是高并发长连接服务，就是多点都连接在我们的服务器上，这个比传统的API要大很多。\r\n\r\n我们看一下推送架构怎么从架构底层做到实时性的。从左上角的一条微博在我们系统发布之后，我们把它放在一个消息队列里面，然后会有一个消息队列的处理程序把它拿过来，处理以后放到db里面。假如说我们不做持久化，因为我们推送数据也不能丢失，我们就要写一个很复杂的程序，将S数据异步去存，这样就会非常复杂，而且系统也会有不稳定的因素。从另外一个角度来说，我们做持久化也是做过测试的。我们推送整个流程可以做到100毫秒和200毫秒之间，就是说我们在这个时间能把数据推送出去。\r\n\r\n我们再看一下内部细节，就是我们收到数据之后首先要经过最上面RECEIVER。然后推到我们的引擎里面，这个引擎会做两个事情，首先会把用户的关系拿过来，然后按照用户关系马上推送给他相应的粉丝。所以我们调研方已经在那儿等待了，我们需要有一个唤醒操作，就是说在接口这儿把它唤醒，然后把它发送过去。最后是一个高并发的长连服务器，就是一台服务器支持10万以上的并发连接。最右边中间有一个圆圈叫做Stream Buffer，我们需要Stream Buffer是要保存用户最近的数据。因为用户可能会有断线的，比如说他发送数据的时候断线半分钟，我们需要把这半分钟补给他。这就是我们的推送架构。\r\n\r\n下面介绍一下平台安全部分。由于我们的接口是完全开放的，所以我们要防范很多恶意行为，有很多人担心我们接口是开放的，是不是有人通过这个接口发垃圾广告，或者是刷粉丝，我们技术架构怎么来防范这一点呢？这是我们的安全架构，做了三个层面的事情。总上面是我们有一个实时处理，比如说根据频度、内容的相似性来进行判断，判断你发的是不是广告或者是垃圾内容。中间这个是一个处理器，我们会根据一些行为进行判断，比如说如果我们只是实时拦截的话，有些行为很难防止，我们做了个离线纠正的模块，比如说他潜伏的几个月开始发广告了，我们可以事后把这些人清除掉，以保证我们平台的健康。最后是通过监控的维度来保证内容的安全。目前内容安全的架构大概是51的体系，就是说我们的实时拦截可以做到50%的防止，离线分析大概可以做到40%的防止。\r\n\r\n微博平台需要为用户提供安全及良好的体验应用，以及为开发者营造一个公平的环境，所以我们的接口需要清晰安全的规则。从一个APP调用我们的接口，需要几个阶层，需要划分不同的业务模块。第二个是安全层。第三个是权限层。这是我们平台安全的两个维度，一个接口安全，一个是内容安全。\r\n\r\n我今天讲的是架构方面的问题，在座大部分是开发者，可能大家都在处理不同的架构问题，架构很多地方是相通的。我们需要做一个软件系统需要解决的本质问题是什么？微博第一版解决发布规模问题，第二版是解决数据规模的问题，第三版是解决服务化的问题。将复杂的问题简单化之后，我们才可以设计出一个容易扩展的大规模架构。我今天介绍就这么多，我们微博实际上是很需要各方面的技术人员，大家对我们的架构如果感兴趣的话、对我们的系统感兴趣的话，也希望各方面的人员参与我们微博的团队，随时可以给我微博上发私信。\r\n\r\n转自：百度文库', '2012-07-04 11:31:33', '2', null);
INSERT INTO `blog_post` VALUES ('459', '2', 'Win7 自定义右键发送到', 'Windows7 修改右键菜单项-发送到\r\n\r\n<blockquote class=\"code\">C:\\Users\\帐户名\\AppData\\Roaming\\Microsoft\\Windows\\SendTo</blockquote>\r\n\r\nAppData 是隐藏的，可以先把系统文件设为可见，也可以直接在地址栏输入以上路径\r\n\r\n<!--more-->', '2012-07-06 14:02:43', '2', null);
INSERT INTO `blog_post` VALUES ('460', '1', 'Apache2 httpd.conf 常用配置', '项目主页：<a href=\"http://httpd.apache.org/\" target=\"_blank\">Apache HTTP Server</a>\n\n1：Listen 80\n\n2：DocumentRoot \"D:/Apache2.2/htdocs\"\n\n3：DirectoryIndex index.html index.php\n\n4：AddType application/x-httpd-php .php\n\n5：虚拟目录：\n\n<!--more-->\n\n<pre class=\"brush:xml\">&lt;Directory /&gt;\n    Options FollowSymLinks\n    AllowOverride None\n    Order deny,allow\n    Deny from all\n&lt;/Directory&gt;\n\nAlias /dwz \"E:/dwz/\"\n&lt;Directory \"E:/dwz/\"&gt; \n    Options Indexes FollowSymLinks\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n&lt;/Directory&gt;</pre>\n\n6：PHP5\n<pre class=\"brush:xml\">#BEGIN PHP INSTALLER EDITS - REMOVE ONLY ON UNINSTALL\nPHPIniDir \"D:/php/\"\nLoadModule php5_module \"D:/php/php5apache2_2.dll\"\n#END PHP INSTALLER EDITS - REMOVE ONLY ON UNINSTALL</pre>', '2012-07-07 13:39:28', '2', null);
INSERT INTO `blog_post` VALUES ('461', '2', 'Google Code Project 收集', '1：<a href=\"http://code.google.com/p/sinatopenapi/\" target=\"_blank\">新浪微博开放平台接口调用类PHP5版</a>\r\n\r\n2：<a href=\"http://code.google.com/p/b3log-solo/\" target=\"_blank\">Java 博客-b3log-solo</a>\r\n\r\n3：<a href=\"http://code.google.com/p/go-home/\" target=\"_blank\">针对12306网上火车票的订票软件</a>\r\n\r\n4：<a href=\"http://code.google.com/p/google-code-prettify/\" target=\"_blank\">google-code-prettify</a>\r\n\r\n5：<a href=\"https://code.google.com/p/qqweibo-sdk-all-in-one/\" target=\"_blank\">qqweibo-sdk-all-in-one</a>\r\n\r\n<!--more-->', '2012-07-07 22:22:09', '2', null);
INSERT INTO `blog_post` VALUES ('462', '1', 'PHP 验证码', '1：<a href=\"http://code.google.com/p/cool-php-captcha/\" target=\"_blank\">cool-php-captcha</a>\r\n\r\n<img alt=\"\" data-original=\"http://1.zhanqi.sinaapp.com/widget/cool-php-captcha/captcha.php\" />\r\n\r\n<!--more-->\r\n\r\n2：<a href=\"http://www.phpcaptcha.org/\" target=\"_blank\">securimage</a>\r\n\r\n<img alt=\"\" data-original=\"http://1.zhanqi.sinaapp.com/widget/securimage/securimage_show.php\" />\r\n\r\n3：<a href=\"http://www.captcha.ru/en/kcaptcha/\" target=\"_blank\">kcaptcha</a> <a href=\"http://www.captcha.ru/kcaptcha.zip\">download</a>\r\n\r\n<img alt=\"\" data-original=\"http://1.zhanqi.sinaapp.com/widget/kcaptcha/index.php\" />', '2012-07-08 18:22:22', '2', null);
INSERT INTO `blog_post` VALUES ('463', '2', 'IP地址查询接口', '1：<a href=\"http://int.dpool.sina.com.cn/iplookup/iplookup.php\" target=\"_blank\">新浪</a>：\r\n<blockquote>// 具体参数不明\r\nhttp://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js/json&amp;ip=x.x.x.x</blockquote>\r\n<!--more-->\r\n2：<a href=\"http://fw.qq.com/ipaddress\" target=\"_blank\">腾讯</a>\r\n<blockquote>// 暂时无法使用\r\nhttp://fw.qq.com/ipaddress</blockquote>\r\n3：<a href=\"http://whois.pconline.com.cn/?ip=183.61.71.131\" target=\"_blank\">太平洋电脑网</a>\r\n<blockquote>// 功能齐全\r\nhttp://whois.pconline.com.cn/?ip=x.x.x.x</blockquote>\r\n4：<a href=\"http://www.youdao.com/smartresult-xml/search.s?type=ip&amp;q=183.61.71.131\" target=\"_blank\">有道</a>\r\n<blockquote>// 功能简单\r\nhttp://www.youdao.com/smartresult-xml/search.s?type=ip&amp;q=183.61.71.131</blockquote>\n\n\n', '2012-07-11 13:56:49', '2', null);
INSERT INTO `blog_post` VALUES ('518', '1', 'Tomcat 常用配置', '<h4 class=\"subtitle\">1：tomcat-users.xml 用户角色与权限配置</h4>\r\n<pre class=\"code xml prettyprint lang-xml brush:xml\">&lt;tomcat-users&gt;\r\n    &lt;role rolename=\"manager\"/&gt;\r\n    &lt;role rolename=\"admin-gui\"/&gt;\r\n    &lt;role rolename=\"manager-gui\"/&gt;\r\n    &lt;user username=\"admin\" password=\"admin\" roles=\"admin-gui,manager-gui,manager\"/&gt;\r\n&lt;/tomcat-users&gt;</pre>\r\n<!--more-->\r\n<h4 class=\"subtitle\">2：server.xml 配置端口，编码，项目别名等</h4>\r\n<pre class=\"code xml prettyprint lang-xml brush:xml\">&lt;Host name=\"localhost\"  appBase=\"webapps\" unpackWARs=\"true\"\r\n        autoDeploy=\"true\" xmlValidation=\"false\" xmlNamespaceAware=\"false\"&gt;\r\n    &lt;Context path=\"/fifa\" docBase=\"F:\\MyEclipse\\FIFA\\WebRoot\"  reloadable=\"true\"/&gt;\r\n&lt;/Host&gt;</pre>\r\n<h4 class=\"subtitle\">3：context.xml 上下文配置</h4>\r\n<pre class=\"code xml prettyprint lang-xml brush:xml\">&lt;Context reloadable=\"true\"&gt;\r\n    &lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt;\r\n&lt;/Context&gt;</pre>', '2012-08-02 00:08:08', '2', null);
INSERT INTO `blog_post` VALUES ('519', '2', 'Ubuntu_Server 搭建FTP服务器', '2、获取最新的软件信息\r\n执行apt-get的更新过程:\r\nsudo apt-get update\r\n\r\n3、安装vsftpd软件\r\nsudo apt-get install vsftpd\r\n\r\n4、设置 vsftpd.conf文件\r\n\r\n修改之前最好先备份下这个文件：\r\nsudo cp /etc/vsftpd.conf /etc/vsftpd.conf.old\r\n\r\n然后可以改动了（主要是以下几行代码）：\r\n#不让匿名用户使用\r\n#anonymous_enable=YES\r\n#本地用户可用，这样ftp服务器的每一个用户就有了一个ftp账户了\r\nlocal_enable=YES\r\n#可用写操作\r\nwrite_enable=YES\r\n#文件上传后的读写权限，设置为022，则文件上传后的权限为644，文件夹上传后的权限为755\r\nlocal_umask=022\r\n\r\n5、删除vsftpd的默认匿名账户\r\nsudo rm -R /home/ftp\r\n\r\n6、如果要进行更严格的ftp限制，可以使用如下操作\r\n要解决这些问题我们还得设置下vsftpd.conf\r\n#启动chroot列表(Change root)\r\nchroot_list_enable=YES\r\n#指定列表位置(我这用的是默认地址)\r\nchroot_list_file=/etc/vsftpd.chroot_list\r\n\r\n接下来我们得在vsftpd.chroot_list上写进去我们要限制哪些用户，不让他们“漂移”..\r\n现在有用户linyupark，所以只要sudo nano一下，往里面写就行了\r\n这样我们已经解决第2个问题了，登陆的用户只能在它的用户文件夹里活动，下面我们要更狠一点，让他只能在public_html里活动\r\n依然还是找vsftpd.conf\r\n#这句默认设置里是没有的，自己加\r\nuser_config_dir=/etc/自己定义一个设置个别用户用的文件夹地址\r\n\r\n根据自己设置的地址，建立一个相应的文件夹，然后往里面建立和用户名相同的文件，vim一下：\r\n#本地用户的根地址,假设用户是linyupark\r\nlocal_root=/home/linyupark/public_html\r\n\r\n重启下FTP服务：\r\nsudo /etc/init.d/vsftpd restart\r\n\r\n本文可以自由转载，转载时请保留全文并注明出处：\r\n转载自仲子说 [ http://www.wangzhongyuan.com/ ]\r\n原文链接：http://www.wangzhongyuan.com/archives/701.html\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nUbuntu Server搭建FTP服务器\r\n匿名服务器架设\r\n[日期：2010-04-18] 来源：Ubuntu社区  作者：slmagicbox \r\n\r\n \r\n环境：Ubuntu 9.04 Server+VSFTPD 2.0.7\r\nslmagicbox@ubuntu904server:~$ uname -a\r\nLinux Ubuntu904server 2.6.28-11-server #42-Ubuntu SMP Fri Apr 17 02:48:10 UTC 2009 i686 GNU/Linux \r\n\r\n\r\nslmagicbox@Ubuntu904server:~$ dpkg -l | grep vsftpd\r\nii vsftpd                                    2.0.7-0Ubuntu1                    The Very Secure FTP Daemon\r\n\r\n\r\n原始配置文件/etc/vsftpd.conf：\r\n本配置文件为安装vsftpd后默认生成的，以“＃”开头为注释项\r\n\r\n# Example config file /etc/vsftpd.conf \r\n   listen=YES               ＃以standalone模式运行vsftpd\r\n   #listen_ipv6=YES\r\n    anonymous_enable=YES ＃允许匿名用户访问\r\n   #local_enable=YES\r\n   #write_enable=YES\r\n   #local_umask=022\r\n   #anon_upload_enable=YES\r\n   #anon_mkdir_write_enable=YES\r\n   dirmessage_enable=YES    ＃当用户首次进入FTP服务器的目录时，显示该目录下的message消息，默认为.message文件,可以用message_file来定义\r\n   xferlog_enable=YES ＃启用日志，默认路径/var/log/vsftpd.log\r\n   connect_from_port_20=YES ＃数据连接使用默认的ftp-data端口(20端口)\r\n   #chown_uploads=YES\r\n   #chown_username=whoever\r\n   #xferlog_file=/var/log/vsftpd.log\r\n   #xferlog_std_format=YES\r\n   #idle_session_timeout=600\r\n   #data_connection_timeout=120\r\n   #nopriv_user=ftpsecure\r\n   #async_abor_enable=YES\r\n   #ascii_upload_enable=YES\r\n   #ascii_download_enable=YES\r\n   #ftpd_banner=Welcome to blah FTP service.\r\n   #deny_email_enable=YES\r\n   #banned_email_file=/etc/vsftpd.banned_emails\r\n\r\n   # chroot_list_enable below.\r\n   #chroot_local_user=YES\r\n   #chroot_list_enable=YES\r\n   #chroot_list_file=/etc/vsftpd.chroot_list\r\n   #ls_recurse_enable=YES\r\n\r\n   # Debian customization\r\n   secure_chroot_dir=/var/run/vsftpd ＃忽略\r\n   pam_service_name=vsftpd ＃忽略\r\n   rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem ＃忽略\r\n   rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key ＃忽略 \r\n\r\nslmagicbox@Ubuntu904server:~$ cd /home\r\nslmagicbox@Ubuntu904server:/home$ ls -l | grep ftp\r\ndrwxr-xr-x 2 root       nogroup    4096 2009-05-11 10:38 ftp\r\n\r\n功能：\r\n1） 默认功能:\r\n   匿名用户可以登录，下载。但是无上传、修改权限。www.linuxidc.com并且限制在ftp用户文件夹（/home/ftp） 下访问.\r\n   \r\n2）匿名用户上传功能：\r\n    write_enable=YES                ＃启用全局上传\r\n    anon_upload_enable=YES         ＃启用匿名用户上传\r\n    anon_mkdir_write_enable=YES    ＃启用匿名用户新建文件夹权限，建议不开启\r\n    \r\n    \r\n    slmagicbox@Ubuntu904server:/home$ sudo chown -R ftp\\: ftp/\r\n    slmagicbox@Ubuntu904server:/home$ ls -l | grep ftp\r\n   drwxr-xr-x 2 ftp        nogroup    4096 2009-05-11 10:44 ftp\r\n    \r\n   结果出错：    500 OOPS: vsftpd: refusing to run with writable anonymous root\r\n    原因： the user that runs as the daemon (in this case user \"ftp\") cannot have write access to the anonymous root directory.\r\n    结论： 匿名用户主目录（/home/ftp） 无法作为上传目录，需新建文件夹，并开启相应写权限\r\n   slmagicbox@Ubuntu904server:/home$ sudo chown -R root:nogroup ftp\r\n\r\n    slmagicbox@Ubuntu904server:/$ cd /home/ftp    \r\n    slmagicbox@Ubuntu904server:/home/ftp$ sudo mkdir upload\r\n    slmagicbox@Ubuntu904server:/home/ftp$ sudo chown ftp\\: upload/\r\n    slmagicbox@Ubuntu904server:/home/ftp$ sudo chmod 755 upload\r\n    slmagicbox@Ubuntu904server:/home/ftp$ ls -l\r\n       drwxr-xr-x 2 ftp nogroup 4096 2009-05-11 13:30 upload\r\n\r\n\r\n验证：\r\n    ＃＃＃＊＊＊（1）通过ftp新建一个文件夹 （2）通过ftp上传一个文件至upload目录，并注意查看两者权限 ＊＊＊＃＃＃\r\n    slmagicbox@Ubuntu904server:/home/ftp/upload$ ls -l\r\n        -rw------- 1 ftp nogroup 0 2009-05-11 13:45 test2         ＃匿名用户默认上传umask=077, 故上传文件权限为 666－077＝600\r\n        drwx------ 2 ftp nogroup 4096 2009-05-11 13:53 test     ＃匿名用户默认上传umask=077, 故上传文件夹权限为 777－077＝700\r\n\r\n\r\n\r\n\r\n本地用户FTP服务器架设\r\n[日期：2010-04-18] 来源：Ubuntu社区  作者：slmagicbox \r\n\r\n \r\n环境：Ubuntu 9.04 Server+VSFTPD 2.0.7\r\n\r\nslmagicbox@Ubuntu904server:~$ uname -a\r\nLinux Ubuntu904server 2.6.28-11-server #42-Ubuntu SMP Fri Apr 17 02:48:10 UTC 2009 i686 GNU/Linux \r\n\r\n\r\nslmagicbox@Ubuntu904server:~$ dpkg -l | grep vsftpd\r\nii vsftpd                                    2.0.7-0Ubuntu1                    The Very Secure FTP Daemon\r\n\r\n\r\n原始配置文件/etc/vsftpd.conf：\r\n本配置文件为安装vsftpd后默认生成的，以“＃”开头为注释项\r\n# Example config file /etc/vsftpd.conf \r\n   listen=YES               ＃以standalone模式运行vsftpd\r\n   #listen_ipv6=YES\r\n    anonymous_enable=YES ＃允许匿名用户访问\r\n   #local_enable=YES\r\n   #write_enable=YES\r\n   #local_umask=022\r\n   #anon_upload_enable=YES\r\n   #anon_mkdir_write_enable=YES\r\n   dirmessage_enable=YES    ＃当用户首次进入FTP服务器的目录时，显示该目录下的message消息，默认为.message文件,可以用message_file来定义\r\n   xferlog_enable=YES ＃启用日志，默认路径/var/log/vsftpd.log\r\n   connect_from_port_20=YES ＃数据连接使用默认的ftp-data端口(20端口)\r\n   #chown_uploads=YES\r\n   #chown_username=whoever\r\n   #xferlog_file=/var/log/vsftpd.log\r\n   #xferlog_std_format=YES\r\n   #idle_session_timeout=600\r\n   #data_connection_timeout=120\r\n   #nopriv_user=ftpsecure\r\n   #async_abor_enable=YES\r\n   #ascii_upload_enable=YES\r\n   #ascii_download_enable=YES\r\n   #ftpd_banner=Welcome to blah FTP service.\r\n   #deny_email_enable=YES\r\n   #banned_email_file=/etc/vsftpd.banned_emails\r\n\r\n   # chroot_list_enable below.\r\n   #chroot_local_user=YES\r\n   #chroot_list_enable=YES\r\n   #chroot_list_file=/etc/vsftpd.chroot_list\r\n   #ls_recurse_enable=YES\r\n\r\n   # Debian customization\r\n   secure_chroot_dir=/var/run/vsftpd ＃忽略\r\n   pam_service_name=vsftpd ＃忽略\r\n   rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem ＃忽略\r\n   rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key ＃忽略 \r\n   \r\n修改后功能：\r\n1）不允许匿名，本地用户可上传\r\n     anonymous_enable=NO ＃注释掉的话，默认为允许\r\n     anon_upload_enable=NO ＃anonymous_enable＝YES时起作用，注释掉的话，默认为允许，前提是全局上传权限开启（write_enable＝YES）\r\n     anon_mkdir_write_enable=NO ＃anonymous_enable＝YES时起作用，注释掉的话，默认为允许，前提是全局上传权限开启（write_enable＝YES）\r\n\r\n     local_enable=YES\r\n     write_enable=YES\r\n     local_umask=022 ＃默认为077\r\n\r\n\r\n功能验证：\r\n1）匿名用户无法登录\r\n2）本地用户登录成功，并可浏览整个文件系统，ftp权限由系统权限来控制\r\n3）在本地用户主目录下上传一个文件，并且创建一个文件夹，观察两者权限。\r\n     slmagicbox@Ubuntu904server:~$ ls -l\r\n           drwxr-xr-x 2 slmagicbox slmagicbox 4096 2009-05-11 16:43 test1 ＃文件夹权限为 777－022＝744\r\n           -rw-r--r-- 1 slmagicbox slmagicbox    0 2009-05-11 16:43 test2＃文件权限为 666－022＝644\r\n4) 添加一个本地用户ftptest1,让其可以ftp登录\r\n     slmagicbox@Ubuntu904server:~$ sudo useradd ftptest1 -m ＃创建一个新的本地用户ftptest1,-m参数为创建该用户home文件夹（/home/ftptest1），ftp用户必须有home目录，否则会报500 OOPS: cannot change directory:/home/ftptest1 的错误\r\n     slmagicbox@Ubuntu904server:/home$ sudo passwd ftptest1 ＃为ftptest1用户设置密码\r\n     输入新的 UNIX 口令： \r\n     重新输入新的 UNIX 口令： \r\n     passwd: password updated successfully\r\n    slmagicbox@XXX:~$ ftp 192.168.0.111\r\n       Connected to 192.168.0.111.\r\n       220 (vsFTPd 2.0.7)\r\n       Name (192.168.0.111:slmagicbox): ftptest1\r\n       331 Please specify the password.\r\n       Password:\r\n       230 Login successful.\r\n       Remote system type is UNIX.\r\n       Using binary mode to transfer files.\r\n       ftp>      #登录成功\r\n5）现在本地用户可以ftp了，但是让一个ftp用户在你的服务器上到处逛，是不是感觉不放心呢？是否可以将ftp用户限定在他们的home目录下呢？这就要用到ch_root功能了。\r\n     编辑配置文件/etc/vsftpd.conf:\r\n     chroot_local_user=YES\r\n\r\n     slmagicbox@Ubuntu904server:~$ sudo /etc/init.d/vsftpd restart ＃重启一下服务，让配置更新\r\n\r\n     slmagicbox@FY-IT-Wangzh:~$ ftp 192.168.0.111\r\n        Connected to 192.168.0.111.\r\n        220 (vsFTPd 2.0.7)\r\n        Name (192.168.0.111:slmagicbox): ftptest1\r\n        331 Please specify the password.\r\n        Password:\r\n        230 Login successful.\r\n        Remote system type is UNIX.\r\n        Using binary mode to transfer files.\r\n        ftp> ls\r\n        200 PORT command successful. Consider using PASV.\r\n        150 Here comes the directory listing.\r\n        226 Directory send OK.\r\n        ftp> cd /home\r\n        550 Failed to change directory. #用户被限定在自己的目录下活动了\r\n\r\n6）上面的效果是不是你想要的呢，但是管理员自己能不能有个特权呢，可以不被限制在home目录下呢？\r\n       编辑配置文件/etc/vsftpd.conf:\r\n       chroot_local_user=YES\r\n       chroot_list_enable=YES   ＃启用chroot_list,列在该文件里的用户排除在外，不限制在个人目录下\r\n       chroot_list_file=/etc/vsftpd.chroot_list ＃定义chroot_list文件位置\r\n\r\n       创建并编辑/etc/vsftpd.chroot_list：\r\n       slmagicbox@Ubuntu904server:/etc$echo \"slmagicbox\" | sudo tee -a vsftpd.chroot_list ＃把你希望排除在外的用户加入/etc/vsftpd.chroot_list\r\n       \r\n       slmagicbox@Ubuntu904server:~$ sudo /etc/init.d/vsftpd restart\r\n7) 仅靠local_enable=YES来控制本地用户可以访问ftp,使得www.linuxidc.com服务器上的所有用户都有权限来访问ftp。你是不是希望可以控制，哪些用户可以访问，哪些用户不可访问？让我们继续 \r\n       编辑配置文件/etc/vsftpd.conf:\r\n      userlist_enable=YES   ＃启用ftp用户列表\r\n          userlist_deny=NO     #不采用deny用户列表方式。userlist_deny可以理解为在userlist_file中列出的用户是被deny掉的，不允许访问ftp的，这里设置为NO,即表示该列表中的用户不是被deny掉的，是有权限访问ftp的。可能有点搞，简单点的理解就是userlist_deny设置是否采用黑名单，YES为采用；NO为不采用黑名单，即采用白名单。这里采用白名单，只有在userlist_file中列出的用户才有权访问ftp.\r\n          userlist_file=/etc/vsftpd.user_list #定义userlist_file文件存放位置    \r\n       创建并编辑/etc/vsftpd.user_list：\r\n          slmagicbox@Ubuntu904server:~$ cd /etc/\r\n          slmagicbox@Ubuntu904server:/etc$ sudo touch vsftpd.user_list\r\n          slmagicbox@Ubuntu904server:/etc$ echo \"slmagicbox\" |sudo tee -a vsftpd.user_list\r\n          slmagicbox@Ubuntu904server:~$ sudo /etc/init.d/vsftpd restart\r\n      看一下效果吧，应该只有slmagicbox可以访问ftp。之后，把需要访问ftp的用户加入/etc/vsftpd.user_list就行了，这样控制就简单了，不遵守纪律的，管理员随时可以把你请出去，别想用上ftp,嚯嚯!!\r\n\r\n\r\n\r\n\r\n虚拟用户FTP服务器架设\r\n[日期：2010-04-18] 来源：Ubuntu社区  作者：slmagicbox \r\n\r\n \r\n环境：Ubuntu 9.04 Server+VSFTPD 2.0.7\r\nslmagicbox@ubuntu904server:~$ uname -a\r\nLinux Ubuntu904server 2.6.28-11-server #42-Ubuntu SMP Fri Apr 17 02:48:10 UTC 2009 i686 GNU/Linux \r\n\r\n\r\nslmagicbox@Ubuntu904server:~$ dpkg -l | grep vsftpd\r\nii vsftpd                                    2.0.7-0Ubuntu1                    The Very Secure FTP Daemon\r\n\r\n\r\n原始配置文件/etc/vsftpd.conf：\r\n本配置文件为安装vsftpd后默认生成的，以“＃”开头为注释项\r\n# Example config file /etc/vsftpd.conf \r\n   listen=YES               ＃以standalone模式运行vsftpd\r\n   #listen_ipv6=YES\r\n    anonymous_enable=YES ＃允许匿名用户访问\r\n   #local_enable=YES\r\n   #write_enable=YES\r\n   #local_umask=022\r\n   #anon_upload_enable=YES\r\n   #anon_mkdir_write_enable=YES\r\n   dirmessage_enable=YES    ＃当用户首次进入FTP服务器的目录时，显示该目录下的message消息，默认为.message文件,可以用message_file来定义\r\n   xferlog_enable=YES ＃启用日志，默认路径/var/log/vsftpd.log\r\n   connect_from_port_20=YES ＃数据连接使用默认的ftp-data端口(20端口)\r\n   #chown_uploads=YES\r\n   #chown_username=whoever\r\n   #xferlog_file=/var/log/vsftpd.log\r\n   #xferlog_std_format=YES\r\n   #idle_session_timeout=600\r\n   #data_connection_timeout=120\r\n   #nopriv_user=ftpsecure\r\n   #async_abor_enable=YES\r\n   #ascii_upload_enable=YES\r\n   #ascii_download_enable=YES\r\n   #ftpd_banner=Welcome to blah FTP service.\r\n   #deny_email_enable=YES\r\n   #banned_email_file=/etc/vsftpd.banned_emails\r\n\r\n   # chroot_list_enable below.\r\n   #chroot_local_user=YES\r\n   #chroot_list_enable=YES\r\n   #chroot_list_file=/etc/vsftpd.chroot_list\r\n   #ls_recurse_enable=YES\r\n\r\n   # Debian customization\r\n   secure_chroot_dir=/var/run/vsftpd ＃忽略\r\n   pam_service_name=vsftpd ＃忽略\r\n   rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem ＃忽略\r\n   rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key ＃忽略 \r\n    \r\n\r\n\r\n修改后功能：\r\n\r\n\r\n首先我们在/home/ftp目录下建立了以下两个子目录\r\n•ftphome1 \r\n•ftphome2 \r\n然后，我们创建3个虚拟用户，密码分别是用户名后加\"test\"\r\n•ftpvuser1 \r\n•ftpvuser2 \r\n•ftpvuser3 \r\n•用户ftpvuser1 的主目录为 ftphome1 ，只读权限 \r\n•用户ftpvuser2 的主目录为 ftphome2，只读权限 \r\n•用户ftpvuser3 的主目录仍为 ftphome2 ，拥有所有权限 \r\n步骤：\r\n1. 创建虚拟用户数据库\r\n       1.1 创建文本文件/etc/vsftpd.ftpvuser_list,内容为：           ftpvuser1 \r\nftpvuser1test\r\nftpvuser2 \r\nftpvuser2test\r\nftpvuser3 \r\nftpvuser3test\r\n \r\nslmagicbox@Ubuntu904server:~$ sudo touch /etc/vsftpd.ftpvuser_list\r\n           slmagicbox@Ubuntu904server:~$ echo \"ftpvuser1\" |sudo tee -a /etc/vsftpd.ftpvuser_list\r\n           slmagicbox@Ubuntu904server:~$ echo \"ftpvuser1test\" |sudo tee -a /etc/vsftpd.ftpvuser_list\r\n           slmagicbox@Ubuntu904server:~$ echo \"ftpvuser2\" |sudo tee -a /etc/vsftpd.ftpvuser_list\r\n           slmagicbox@Ubuntu904server:~$ echo \"ftpvuser2test\" |sudo tee -a /etc/vsftpd.ftpvuser_list\r\n           slmagicbox@Ubuntu904server:~$ echo \"ftpvuser3\" |sudo tee -a /etc/vsftpd.ftpvuser_list\r\n           slmagicbox@Ubuntu904server:~$ echo \"ftpvuser3test\" |sudo tee -a /etc/vsftpd.ftpvuser_list\r\n           slmagicbox@Ubuntu904server:~$ sudo cat /etc/vsftpd.ftpvuser_list\r\n   确认显示内容与上面列表的相同。     \r\n      \r\n       1.2 安装db4.6-util工具（Berkeley v4.6 database utilities）,生成数据库/etc/vsftpd_vuser.db\r\n           slmagicbox@Ubuntu904server:~$ sudo apt-get install db4.6-util\r\n           slmagicbox@Ubuntu904server:~$ sudo db4.6_load -T -t hash -f /etc/vsftpd.ftpvuser_list /etc/vsftpd_vuser.db\r\n           slmagicbox@Ubuntu904server:~$ sudo chmod 600 /etc/vsftpd_vuser.db\r\n        \r\n\r\n2. 配置PAM文件 \r\n       2.1 新建/etc/pam.d/vsftpd.vuser 内容为：\r\nauth required /lib/security/pam_userdb.so db=/etc/vsftpd_vuseraccount required /lib/security/pam_userdb.so db=/etc/vsftpd_vuser \r\n   slmagicbox@Ubuntu904server:/etc/pam.d$ sudo vim /etc/pam.d/vsftpd.vuser \r\n       slmagicbox@Ubuntu904server:/etc/pam.d$ cat /etc/pam.d/vsftpd.vuser \r\n\r\n       \r\n       2.2 修改配置文件 /etc/vsftpd.conf\r\n   pam_service_name=vsftpd.vuser        #该名字与上面的文件名对应 \r\n\r\n3.为虚拟用户创建本地系统用户\r\n       3.1 新建一个系统用户ftpvuser，用户家目录为/home/ftp, 用户登录终端设为/bin/false(该用户不能登录系统) \r\n       slmagicbox@Ubuntu904server:/etc/pam.d$ sudo useradd ftpvuser -d /home/ftp -s /bin/false\r\n              slmagicbox@Ubuntu904server:/etc/pam.d$ sudo chown ftpvuser:ftpvuser /home/ftp\r\n    \r\n4.编辑配置文件/etc/vsftpd.conf \r\n       4.1      listen=YES  ＃以standalone模式运行vsftpdanonymous_enable=NO  ＃禁止匿名dirmessage_enable=YES ＃显示目录下的message消息xferlog_enable=YES ＃启用日志xferlog_file=/var/log/vsftpd.log ＃设定日志路径xferlog_std_format=YES ＃使用标准日志格式chroot_local_user=YES ＃限定用户在家目录guest_enable=YES ＃启用虚拟用户guest_username=ftpvuser ＃虚拟用户帐号#user_config_dir=/etc/vsftpd_user_conf ＃先不启用，后面启用时再说明pam_service_name=vsftpd.vuser ＃设置pam服务名，上面2.2已经说明local_enable=YES secure_chroot_dir=/var/run/vsftpd ＃忽略 \r\n\r\n\r\n5. 区分虚拟用户权限\r\n       上面的设置，3个虚拟用户都可以正常登录，www.linuxidc.com但是3者的家目录都在/home/ftp,权限都是一样的，接下来我们通过设置来区分3个虚拟的权限。\r\n       \r\n       5.1 首先启用上面配置文件中的user_config_dir项\r\n              user_config_dir=/etc/vsftpd_user_conf   ＃启用用户配置文件，设定配置文件存放目录\r\n       5.2 创建配置文件存放目录，并新建用户配置文件，文件名与虚拟用户名相同\r\n              slmagicbox@Ubuntu904server:~$sudo mkdir /etc/vsftpd_user_conf\r\n       slmagicbox@Ubuntu904server:~$cd /etc/vsftpd_user_conf\r\n       slmagicbox@Ubuntu904server:/etc/vsftpd_user_conf$sudo touch ftpvuser1 ftpvuser2 ftpvuser3\r\n\r\n      5.3 编辑虚拟用户配置文件\r\n            ftpvuser1内容为：\r\nlocal_root=/home/ftp/ftphome1 \r\n            ftpvuser2内容为：\r\nlocal_root=/home/ftp/ftphome2 \r\n           ftpvuser3内容为：\r\nlocal_root=/home/ftp/ftphome1write_enable=YES   #开启全局上传(写)权限anon_world_readable_only=NO ＃关闭匿名用户只读（下载）权限anon_upload_enable=YES ＃开启匿名用户上传权限anon_mkdir_write_enable=YES ＃开启匿名用户建目录权限anon_other_write_enable=YES  ＃开启匿名用户除上传和建目录之外的写权限（如重命名，删除等） \r\n\r\n           现在达到我们想要的效果了。^_^\r\n\r\n\r\n\r\n\r\n\r\nFTP服务器的配置\r\n[日期：2010-04-18] 来源：Ubuntu社区  作者：slmagicbox \r\n\r\n \r\n文件传输协议 (FTP) 是一个 TCP 协议，用于在计算机之间上传和下载文件。FTP 工作在客户端/服务器模式下。服务器组件被称为 FTP 守护程序。它持续不断地临听来自远程客户端的 FTP 请求。当一个请求到达时，它管理登录和建立连接。在整个会话期间它执行 FTP 客户端发送来的任何命令。 可以通过两种方式来管理 FTP 服务器的访问：\r\n\r\no 匿名\r\n\r\no 授权\r\n \r\n\r\n在匿名模式中，远程客户端可以使用 “anonymous” 或 “ftp” 缺省用户帐号并通过发送一个邮件地址做为密码来访问 FTP 服务器。在授权模式下一个用户必须拥有帐号和密码。用户所访问 FTP 服务器中目录和文件的权限是根据登录时所用帐号来定义的。一般来说，FTP 守护程序将隐藏在 FTP 服务器的根目录中并将其改到 FTP 家目录。这样就可以向远程传话隐藏文件系统的其他部分。\r\n\r\nvsftpd - FTP 服务器安装\r\n\r\n* vsftpd 是可在 Ubuntu 中使用的 FTP 守护程序之一。它在安装、设置和维护方面十分方便。要安装 vsftpd 您可以使用下列命令：\r\n\r\nsudo apt-get install vsftpd\r\n\r\nvsftpd - FTP 服务器配置\r\n\r\n* 你可以编辑 vsftpd 配置文件，/etc/vsftpd.conf，来配置缺省设置。\r\n\r\nanonymous_enable=YES：是否允许匿名ftp，如否，则选择NO；\r\n\r\nlocal_enable=YES：是否允许本地用户登陆；\r\n\r\nlocal_umask=022：设置本地用户的文件掩码为缺省022，默认值为077；\r\n\r\nanon_upload_enable=YES：是否允许匿名上传文件；\r\n\r\nanon_mkdir_write_enable=YES：是否允许匿名用户有创建目录的权利；\r\n\r\ndirmessage_enable=YES：是否显示目录说明文件，缺省是YES，但需要手工创建.message文件；\r\n\r\nxferlog_enable=YES：是否记录ftp传输过程；\r\n\r\nconnect_from_port_20=YES：是否确信端口传输来自20（ftp-data）；\r\n\r\nchown_username=username：是否改变上传文件的属主，如果需要，则输入一个系统用户名，可以把上传的文件都改成root属主；\r\n\r\nxferlog_file=/var/log/vsftpd.log：ftp传输日志的路径和名字缺省是/var/log/vsftpd.log；\r\n\r\nxferlog_std_format=YES：是否使用标准的ftp xferlog模式；\r\n\r\nidle_session_timeout=600：设置缺省的断开不活跃会话时间；\r\n\r\ndata_connection_timeout=120：设置数据传输超时时间；\r\n\r\nnopriv_user=ftpsecure：运行vsftpd需要的非特权系统用户，缺省是nobody；\r\n\r\nascii_upload_enable=YES：是否使用ASCII方式上传文件；\r\n\r\nascii_download_enable=YES：是否使用ASCII方式下载文件；\r\n\r\nftpd_banner=Welcome to shuke FTP service：定制欢迎信息；\r\n\r\ndeny_email_enable=YES：是否禁止匿名用户使用某些邮件地址；\r\n\r\nbanned_email_file=/etc/vsftpd.banned_emails：如果禁止匿名用户使用某些邮件地址，则输入禁止的邮件地址的路径和文件名；\r\n\r\nchroot_list_enable=YES：是否将系统用户限制在自己的home目录下；\r\n\r\nchroot_list_file=/etc/vsftpd.chroot_list：如果限制系统用户在home目录下，www.linuxidc.com则在列表中写出被禁止的用户列表；\r\n\r\nmax_clients=Number：如果以standalone模式启动，那么，只有$Number个用户可以连接，其他用户将得到错误信息，缺省是0，不限制用户数；\r\n\r\nmessage_file：设置访问一个目录时获得的目录信息文件的文件名，缺省是.message。\r\n\r\n请注意在配置文件中缺省的设置主要是出于安全考虑。上面每一个改变都会使系统的安全性更小，所以请只在您需要时才改变他们。', '2012-08-03 16:51:54', '1', null);
INSERT INTO `blog_post` VALUES ('520', '1', 'JS 关闭窗口无提示', '<script>\nfunction closeWin() {\n  var browserName = navigator.appName;\n	if (browserName==\"Netscape\") {\n		window.open(\'\', \'_parent\', \'\');\n		window.close();\n	}\n	else {\n	  if (browserName == \"Microsoft Internet Explorer\"){\n	  window.opener = \"whocares\";\n	  window.opener = null;\n	  window.open(\'\', \'_top\');\n	  window.close();\n	 }\n}\n}\n</script>\n<p>\n	有时候需要关闭窗口window而不需要提示\n</p>\n<p>\n	<span style=\"white-space:normal;\">以上代码支持IE，Chrome。 \n</p>\n<p>\n	<a href=\"javascript:void(0)\" class=\"more-tag\">---- 阅读更多 ----<!--more--></a> \n</p>\n<pre class=\"code js prettyprint lang-js brush:js\">window.opener=null;    \n//window.opener=top;    \nwindow.open(\"\",\"_self\");    \nwindow.close();  </pre>', '2012-08-04 17:06:01', '2', null);
INSERT INTO `blog_post` VALUES ('522', '2', '我的经济适用男-33集全720P高清下载', '<p>\n	中文名： 我和我的经济适用男\n</p>\n<p>\n	其它译名： 我的经济适用男\n</p>\n<p>\n	出品时间： 2011年\n</p>\n<p>\n	出品公司： 天视卫星传媒股份有限公司\n</p>\n<p>\n	制片地区： 中国大陆\n</p>\n<p>\n	导演： 蒋家骏\n</p>\n<p>\n	编剧： 刘誉\n</p>\n<p>\n	主演： 佟丽娅，李光洁，杜淳，戚薇，高露，乔任梁\n</p>\n<p>\n	集数： 33集\n</p>\n<p>\n	类型： 都市情感\n</p>\n<p>\n	上映时间： 2012年7月15日\n</p>\n<p>\n	原著： 人海中\n</p>\n<p>\n	剧情：何小君（佟丽娅饰）是个外表精致内涵更精致的女孩，走到哪都是一道靓丽的风景线，毕业后顺利进入了 一家大型公司洛可可做文案，而更令人羡煞不已的是她交了一个非常优秀的男朋友冯志豪（杜淳饰）。 冯志豪属于非典型的富二代，不仅人长得帅，能力又强，更是冯氏集团大中华区的总裁，简单的说，他是所有女孩梦寐以嫁的白马王子。在旁人的眼中，他和何小君就是一对极其班配的金童玉女，就等着修成正果的那一天。但天有不测风云，人有旦夕祸福。因为婚约的问题，何小君和冯志豪分了手。在洛可可公司工作期间，由于洛可可和盛华网络游戏公司的合作，何小君遇到了传说中的经济适用男—陈启中（李光洁饰）。之后在好友杜美美（高露饰）的撮合下，陈启中和何小君有了更多的接触，并互相产生了好感。 面对冯志豪的再次突然出现和父母的强力阻挠，何小君与陈启中的恋情最终是否能开花结果呢？ 何小君的闺蜜杜美美和陈启中的下属蔡军（刘天佐饰）共同展现属于他们的10块钱幸福…… 何小君公司素有“灭绝师太”称号的莫柔（戚薇饰），与何小君摄影师表弟杨帆（乔任梁饰）又将展开怎样一段关乎摄影的爱情…… 他们的感情最后又会何去何从……\n</p>\n<p>\n	<a href=\"javascript:void(0)\" class=\"more-tag\">---- 阅读更多 ----<!--more--></a>\n</p>\n<p>\n	截图：\n</p>\n<!--more-->\n<p>\n	<a href=\"http://ww2.sinaimg.cn/large/a92e88f9gw1dvjspbgvfrj.jpg\" target=\"_blank\" class=\"highslide fancybox\" rel=\"group\"><img class=\"lazy\" alt=\"\" src=\"\" data-original=\"http://ww2.sinaimg.cn/large/a92e88f9gw1dvjspbgvfrj.jpg\" /> </a> \n</p>\n<p>\n	<a href=\"http://ww1.sinaimg.cn/large/a92e88f9gw1dvjspipzv3j.jpg\" target=\"_blank\" class=\"highslide fancybox\" rel=\"group\"> <img class=\"lazy\" alt=\"img\" src=\"\" data-original=\"http://ww1.sinaimg.cn/large/a92e88f9gw1dvjspipzv3j.jpg\" /> </a> \n</p>\n<p>\n	<a href=\"http://ww3.sinaimg.cn/large/a92e88f9gw1dvjspmtqstj.jpg\" target=\"_blank\" class=\"highslide fancybox\" rel=\"group\"> <img class=\"lazy\" alt=\"img\" src=\"\" data-original=\"http://ww3.sinaimg.cn/large/a92e88f9gw1dvjspmtqstj.jpg\" /></a> \n</p>\n<p>\n	<a href=\"http://ww1.sinaimg.cn/large/a92e88f9gw1dvjspsh51cj.jpg\" target=\"_blank\" class=\"highslide fancybox\" rel=\"group\"> <img class=\"lazy\" alt=\"img\" src=\"\" data-original=\"http://ww1.sinaimg.cn/large/a92e88f9gw1dvjspsh51cj.jpg\" /></a> \n</p>\n<p>\n	<a href=\"http://ww4.sinaimg.cn/large/a92e88f9gw1dvjspzu14kj.jpg\" target=\"_blank\" class=\"highslide fancybox\" rel=\"group\"> <img class=\"lazy\" alt=\"img\" src=\"\" data-original=\"http://ww4.sinaimg.cn/large/a92e88f9gw1dvjspzu14kj.jpg\" /></a> \n</p>\n<p>\n	在线观看：\n</p>\n<p>\n	<a href=\"http://www.iqiyi.com/dianshiju/wdjjsyn.html\" target=\"_blank\">http://www.iqiyi.com/dianshiju/wdjjsyn.html</a> \n</p>\n<p>\n	下载：\n</p>\n<p>\n	<a href=\"http://kuai.xunlei.com/d/VFLRSQYUFUJQ\" target=\"_blank\">http://kuai.xunlei.com/d/VFLRSQYUFUJQ</a> \n</p>\n<p>\n	<a href=\"http://115.com/file/bebphtrn\" target=\"_blank\">[国产][我的经济适用男][国语33集][DVD-RMVB].torrent</a> \n</p>', '2012-09-05 13:40:37', '2', null);
INSERT INTO `blog_post` VALUES ('524', '1', 'JSP 源码去空白行', '<p>\n	查看JSP文件的源码，一般第一行或者前几行都是空白的，这是因为在代码中使用了指令，比如page，include等，所以渲染出来的页面源代码多了很多空白行。\n</p>\n<p>\n	有兴趣的可以去解决这个问题，在网上找到了两个方法，如下：\n</p>\n<p>\n	<a href=\"javascript:void(0)\" class=\"more-tag\">---- 阅读更多 ----<!--more--></a>\n</p>\n<p>\n	1：针对每个JSP文件，在page指令中增加 trimDirectiveWhitespaces=\"true\"；\n</p>\n<pre class=\"prettyprint lang-html\">&lt;%@page language=\"java\" pageEncoding=\"utf-8\" trimDirectiveWhitespaces=\"true\"%&gt;\n&lt;%@taglib uri=\"/struts-tags\" prefix=\"s\"%&gt;\n&lt;%@include file=\"/common/taglibs.jsp\"%&gt;</pre>\n<p>\n	2：在web.xml中全局配置，很是方便\n</p>\n<p>\n	<br />\n</p>\n<pre class=\"prettyprint lang-xml\">&lt;jsp-config&gt;\n    &lt;jsp-property-group&gt;\n    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n    &lt;trim-directive-whitespaces&gt;true&lt;/trim-directive-whitespaces&gt;\n    &lt;/jsp-property-group&gt;\n&lt;/jsp-config&gt;</pre>\n<p>\n	<br />\n</p>\n<h4>\n	效果图：\n</h4>\n<p>\n	<img data-original=\"http://zhanqi-image.stor.sinaapp.com/post/524.png\" alt=\"img\" src=\"\" class=\"lazy\" /> \n</p>\n<p>\n	<img data-original=\"http://zhanqi-image.stor.sinaapp.com/post/524-2.png\" alt=\"img\" src=\"\" class=\"lazy\" /> \n</p>', '2012-09-02 13:34:04', '2', 'http://ww4.sinaimg.cn/large/675f1013gw1dufcqc7fjlj.jpg');
INSERT INTO `blog_post` VALUES ('525', '2', 'Java 内部类与静态类', 'Java 内部类与静态类我们一般不常用，开源框架经常用，有兴趣可以看看这篇<a href=\"http://hi.baidu.com/yingxiaoqiangy/blog/item/5281c11dc64a276df724e47f.html\" target=\"_blank\">文章</a>，以下是我的一些总结，先了解一下，留着备用。\n<h4>\n	内部类\n</h4>\n1：内部类拥有普通类的所有特性，也拥有类成员变量的特性\n2：内部类可以访问其外部类的成员变量，属性，方法，其它内部类\n<h4>\n	静态类\n</h4>\n<p>\n	1：只有内部类才能声明为static，也可以说是静态内部类\n</p>\n<p>\n	2：只有静态内部类才能拥有静态成员，普通内部类只能定义普通成员\n</p>\n<p>\n	3：静态类跟静态方法一样，只能访问其外部类的静态成员\n</p>\n<p>\n	4：如果在外部类的静态方法中访问内部类，这时候只能访问静态内部类\n</p>\n<p>\n	<a href=\"javascript:void(0)\" class=\"more-tag\">阅读更多<!--more--></a> \n</p>\n<pre class=\"code java prettyprint lang-java brush:java\">/**\n * 外部类，不能声明为 static\n * \n * @author zhanqi\n * \n */\npublic class OuterClass {\n\n    private int ab = 1;\n    private static int sab = 2;\n\n    /**\n     * 普通内部类\n     */\n    public class NormalInnerClass {\n\n        // private static int age = 22;\n        private int age = 22; // 不能声明为static\n\n        public NormalInnerClass() {\n            // 可以访问外部类静态与非静态成员\n            System.out.println(ab);\n            System.out.println(sab);\n        }\n    }\n\n    /**\n     * 静态内部类\n     */\n    public static class StaticInnerClass {\n        // 定义静态与非静态成员都是可以的\n        private static int age = 22;\n        private int age2 = 22;\n\n        private void echo() {\n            // System.out.println(ab);\n            System.out.println(sab);// 只能访问外部类的静态成员\n        }\n    }\n}</pre>\n<h4>\n	内部类的实例化\n</h4>\n<p>\n	1：访问内部类，必须使用：外部类.内部类，OutClass.InnerClass\n</p>\n<p>\n	2：普通内部类必须绑定在其外部类的实例上\n</p>\n<p>\n	3：静态内部类可以直接 new\n</p>\n<pre class=\"code java prettyprint lang-java brush:java\">/**\n * 外部类访问内部类\n */\npublic class OuterClass {\n\n    /**\n     * 普通方法\n     */\n    public void method() {\n        StaticInnerClass sic = new StaticInnerClass();\n        NormalInnerClass nic = new NormalInnerClass();\n    }\n\n    /**\n     * Main\n     */\n    public static void main(String[] args) {\n        // 在静态方法中，只能访问静态成员，静态内部类\n        // NormalInnerClass nic = new NormalInnerClass();\n        StaticInnerClass sic = new StaticInnerClass();\n    }\n}\n\n/**\n * 其它类访问内部类\n */\nclass Test {\n    public static void main(String[] args) {\n        /**\n         * 1：其它类访问内部类，必须使用：外部类.内部类，OutClass.InnerClass\n         * 2：普通内部类必须绑定在其外部类的实例上\n         * 3：静态内部类可以直接 new\n         */\n        OuterClass.StaticInnerClass sic = new OuterClass.StaticInnerClass();\n        // OuterClass.NormalInnerClass n = new OuterClass.NormalInnerClass();\n\n        OuterClass oc = new OuterClass();\n        OuterClass.NormalInnerClass nic = oc.new NormalInnerClass();\n    }\n}</pre>', '2012-09-03 13:32:01', '2', 'http://ww2.sinaimg.cn/large/71298bafgw1dtwahnvya2j.jpg');
INSERT INTO `blog_post` VALUES ('526', '1', 'Java 遍历Map的四种方法', '<p>\n	Java 遍历Map的四种方法\n</p>\n<p>\n	1：for循环遍历Map的keys或values\n</p>\n<p>\n	2：Map的每一个元素都是一个Map.Entry键值对，遍历map.entrySet()\n</p>\n<p>\n	3：Iterator，迭代keyset\n</p>\n<p>\n	4：Iterator，迭代entrySet\n</p>\n<p>\n	<a href=\"javascript:void(0)\" class=\"more-tag\">阅读更多<!--more--></a> \n</p>\n<pre class=\"prettyprint lang-java\">/**\n * 遍历Map的四种方法\n * \n * @author zhanqi\n * @param args\n */\npublic static void main(String[] args) {\n\n    Map map = new HashMap();\n\n    map.put(\"age\", \"23\");\n    map.put(\"name\", \"zhanqi\");\n\n    // System.out.println(\"*********方法一*********\");\n    for (String key : map.keySet()) {\n        System.out.println(key + \"=\" + map.get(key));\n    }\n\n    // System.out.println(\"*********方法二*********\");\n    for (Map.Entry entry : map.entrySet()) {\n        System.out.println(entry);\n    }\n\n    // System.out.println(\"*********方法三*********\");\n    Iterator kit = map.keySet().iterator();\n    while (kit.hasNext()) {\n        String key = kit.next();\n        System.out.println(key + \"=\" + map.get(key));\n    }\n\n    // System.out.println(\"*********方法四*********\");\n    Iterator&amp;gt; eit = map.entrySet().iterator();\n    while (eit.hasNext()) {\n        Map.Entry entry = eit.next();\n        System.out.println(entry.getKey() + \"=\" + entry.getValue());\n    }\n}</pre>', '2012-09-04 12:08:25', '2', 'http://ww1.sinaimg.cn/large/65e9d7c5gw1dv033pw0y6j.jpg');
INSERT INTO `blog_post` VALUES ('527', '1', 'Tomcat启用gzip', '打开conf/server.xml文件：\r\n\r\n<pre class=\"code xml prettyprint lang-xml brush:xml\"> &lt;Connector \r\n    port=\"8080\" \r\n    protocol=\"HTTP/1.1\"\r\n    connectionTimeout=\"20000\"\r\n    redirectPort=\"443\" \r\n    URIEncoding=\"UTF-8\"\r\n    compression=\"on\"   \r\n    noCompressionUserAgents=\"gozilla, traviata\" compressableMimeType=\"text/html,text/xml,text/javascript,text/css,text/plain,application/json\" /&gt;</pre>\r\n', '2012-09-05 12:08:25', '2', '');
INSERT INTO `blog_post` VALUES ('528', '1', 'web.xml filter-mapping dispatcher', 'Java过滤器Filter比较常用，拦截Url请求，如果使用request.getRequestDispatcher(url).forward/include方法，该过滤器就失效了，在web.xml中filter-mapping节点增加dispatcher参数就能解决问题。', '2012-09-10 12:08:25', '2', null);
INSERT INTO `blog_post` VALUES ('529', '1', 'Java 读取 Properties 文件', '<p>\n	Java 读取 Properties 文件：\n</p>\n<p>\n	<a href=\"#\" class=\"more-tag\">Read<!--more-->More</a>\n</p>\n<pre class=\"code java prettyprint lang-java brush:java\">package net.zhanqi.util;\n\nimport java.util.Properties;\n\n/**\n * properties reader\n * \n * @author zhanqi\n * @date 2012-08-23\n */\npublic class ConfigUtils {\n\n    private static Properties prop = new Properties();\n    static {\n        try {\n            prop.load(ClassLoader.getSystemResourceAsStream(\"config.properties\"));\n        } catch (Exception e) {\n            throw new RuntimeException(\"配置文件读取错误：\" + e.getMessage(), e);\n        }\n    }\n\n    /** * 获取值 */\n    public static String get(String key) {\n        return prop.getProperty(key);\n    }\n\n    /** * Main */\n    public static void main(String[] args) {\n        System.out.println(get(\"db2.driverName\"));\n    }\n}</pre>', '2012-09-12 12:08:25', '2', null);
INSERT INTO `blog_post` VALUES ('530', '1', 'JDBC 连接 DB2 数据库', '<p>\n	代码都一样，连接参数如下：\n</p>\n<pre class=\"code text prettyprint gutter lang-text brush:text\">#db2\ndb2.driverName=com.ibm.db2.jcc.DB2\nDriverdb2.dbUrl=jdbc:db2://10.199.26.33:50000/ngbass3\ndb2.dbUsername=metaone\ndb2.dbPassword=asd#123</pre>\n<p>\n	附所需jar包： <a href=\"http://zhanqi-file.stor.sinaapp.com/java/lib/db2jcc.jar\">db2jcc.jar</a> <a href=\"http://zhanqi-file.stor.sinaapp.com/java/lib/db2jcc_license_cisuz.jar\">db2jcc_license_cisuz.jar</a> \n</p>', '2012-09-15 12:08:25', '2', null);
INSERT INTO `blog_post` VALUES ('531', '1', 'Java中如何正确处理异常', '<p>\n	1  引言\n</p>\n<p>\n	在JAVA语言出现以前，传统的异常处理方式多采用返回值来标识程序出现的异常情况，这种方式虽然为程序员所熟悉，但却有多个坏处。首先，一个API可以返回任意的返回值，而这些返回值本身并不能解释该返回值是否代表一个异常情况发生了和该异常的具体情况，需要调用API的程序自己判断并解释返回值的含义。其次，并没有一种机制来保证异常情况一定会得到处理，调用程序可以简单的忽略该返回值，需要调用API的程序员记住去检测返回值并处理异常情况。这种方式还让程序代码变得晦涩冗长，当进行IO操作等容易出现异常情况的处理时，你会发现代码的很大部分用于处理异常情况的switch分支，程序代码的可读性变得很差。 上面提到的问题，JAVA的异常处理机制提供了很好的解决方案。通过抛出JDK预定义或者自定义的异常,能够表明程序中出现了什么样的异常情况；而且JAVA的语言机制保证了异常一定会得到恰当的处理；合理的使用异常处理机制，会让程序代码清晰易懂。&nbsp;\n</p>\n<p>\n	<a href=\"#\" class=\"more-tag\">Read<!--more-->More</a>\n</p>\n<p>\n	2 JAVA异常的处理机制\n</p>\n<p>\n	当程序中抛出一个异常后，程序从程序中导致异常的代码处跳出，java虚拟机检测寻找和try关键字匹配的处理该异常的catch块，如果找到，将控制权交到catch块中的代码，然后继续往下执行程序，try块中发生异常的代码不会被重新执行。如果没有找到处理该异常的catch块，在所有的finally块代码被执行和当前线程的所属的ThreadGroup的uncaughtException方法被调用后，遇到异常的当前线程被中止。&nbsp;\n</p>\n<p>\n	3 JAVA异常的类层次\n</p>\n<p>\n	JAVA异常的类层次如下图所示： 图1 JAVA异常的类层次 Throwable是所有异常的基类，程序中一般不会直接抛出Throwable对象，Exception和Error是Throwable的子类，Exception下面又有RuntimeException和一般的Exception两类。可以把JAVA异常分为三类：         第一类是Error，Error表示程序在运行期间出现了十分严重、不可恢复的错误，在这种情况下应用程序只能中止运行，例如JAVA 虚拟机出现错误。Error是一种unchecked Exception,编译器不会检查Error是否被处理,在程序中不用捕获Error类型的异常；一般情况下，在程序中也不应该抛出Error类型的异常。         第二类是RuntimeException, RuntimeException 是一种unchecked Exception，即表示编译器不会检查程序是否对RuntimeException作了处理，在程序中不必捕获RuntimException类型的异常，也不必在方法体声明抛出RuntimeException类。RuntimeException发生的时候，表示程序中出现了编程错误，所以应该找出错误修改程序，而不是去捕获RuntimeException。         第三类是一般的checked Exception,这也是在编程中使用最多的Exception,所有继承自Exception并且不是RuntimeException的异常都是checked Exception，如图1中的IOException和ClassNotFoundException。JAVA 语言规定必须对checked Exception作处理，编译器会对此作检查，要么在方法体中声明抛出checked Exception,要么使用catch语句捕获checked Exception进行处理，不然不能通过编译。checked Exception用于以下的语义环境： （1） 该异常发生后是可以被恢复的，如一个Inteet连接发生异常被中止后，可以重新连接再进行后续操作。 （2） 程序依赖于不可靠的外部条件，该依赖条件可能出错，如系统IO。 （3） 该异常发生后并不会导致程序处理错误，进行一些处理后可以继续后续操作。 4 JAVA异常处理中的注意事项 合理使用JAVA异常机制可以使程序健壮而清晰，但不幸的是，JAVA异常处理机制常常被错误的使用，下面就是一些关于Exception的注意事项： 1． 不要忽略checked Exception 请看下面的代码： try {   method1();  //method1抛出ExceptionA } catch(ExceptionA e) {     e.printStackTrace(); } 上面的代码似乎没有什么问题，捕获异常后将异常打印，然后继续执行。事实上在catch块中对发生的异常情况并没有作任何处理(打印异常不能是算是处理异常，因为在程序交付运行后调试信息就没有什么用处了)。这样程序虽然能够继续执行，但是由于这里的操作已经发生异常，将会导致以后的操作并不能按照预期的情况发展下去，可能导致两个结果： 一是由于这里的异常导致在程序中别的地方抛出一个异常，这种情况会使程序员在调试时感到迷惑，因为新的异常抛出的地方并不是程序真正发生问题的地方，也不是发生问题的真正原因； 另外一个是程序继续运行，并得出一个错误的输出结果，这种问题更加难以捕捉，因为很可能把它当成一个正确的输出。 那么应该如何处理呢，这里有四个选择： （1） 处理异常，进行修复以让程序继续执行。 （2） 重新抛出异常，在对异常进行分析后发现这里不能处理它，那么重新抛出异常，让调用者处理。 （3） 将异常转换为用户可以理解的自定义异常再抛出，这时应该注意不要丢失原始异常信息（见5）。 （4） 不要捕获异常。 因此，当捕获一个unchecked Exception的时候，必须对异常进行处理；如果认为不必要在这里作处理，就不要捕获该异常，在方法体中声明方法抛出异常，由上层调用者来处理该异常。 2． 不要一次捕获所有的异常 请看下面的代码： try {   method1();  //method1抛出ExceptionA     method2();  //method1抛出ExceptionB     method3();  //method1抛出ExceptionC } catch(Exception e) {     …… } 这是一个很诱人的方案，代码中使用一个catch子句捕获了所有异常，看上去完美而且简洁，事实上很多代码也是这样写的。但这里有两个潜在的缺陷，一是针对try块中抛出的每种Exception，很可能需要不同的处理和恢复措施，而由于这里只有一个catch块，分别处理就不能实现。二是try块中还可能抛出RuntimeException,代码中捕获了所有可能抛出的RuntimeException而没有作任何处理，掩盖了编程的错误，会导致程序难以调试。 下面是改正后的正确代码： try {   method1();  //method1抛出ExceptionA     method2();  //method1抛出ExceptionB     method3();  //method1抛出ExceptionC } catch(ExceptionA e) {     …… } catch(ExceptionB e) {     …… } catch(ExceptionC e) {     …… } 3． 使用finally块释放资源     finally关键字保证无论程序使用任何方式离开try块，finally中的语句都会被执行。在以下三种情况下会进入finally块： （1） try块中的代码正常执行完毕。 （2） 在try块中抛出异常。 （3） 在try块中执行retu、break、continue。 因此，当你需要一个地方来执行在任何情况下都必须执行的代码时，就可以将这些 代码放入finally块中。当你的程序中使用了外界资源,如数据库连接，文件等，必须将释放这些资源的代码写入finally块中。 必须注意的是，在finally块中不能抛出异常。JAVA异常处理机制保证无论在任何情况下必须先执行finally块然后在离开try块，因此在try块中发生异常的时候，JAVA虚拟机先转到finally块执行finally块中的代码，finally块执行完毕后，再向外抛出异常。如果在finally块中抛出异常，try块捕捉的异常就不能抛出，外部捕捉到的异常就是finally块中的异常信息，而try块中发生的真正的异常堆栈信息则丢失了。 请看下面的代码： Connection  con = null; try {     con = dataSource.getConnection();     …… } catch(SQLException e) {     ……     throw e;//进行一些处理后再将数据库异常抛出给调用者处理 } finally {     try     {         con.close();     }     catch(SQLException e) {     e.printStackTrace();     …… } } 运行程序后，调用者得到的信息如下 java.lang.NullPointerException at myPackage.MyClass.method1(methodl.java:266) 而不是我们期望得到的数据库异常。这是因为这里的con是null的关系，在finally语句中抛出了NullPointerException,在finally块中增加对con是否为null的判断可以避免产生这种情况。 4． 异常不能影响对象的状态 异常产生后不能影响对象的状态，这是异常处理中的一条重要规则。 在一个函数 中发生异常后，对象的状态应该和调用这个函数之前保持一致，以确保对象处于正确的状态中。 如果对象是不可变对象(不可变对象指调用构造函数创建后就不能改变的对象，即     创建后没有任何方法可以改变对象的状态)，那么异常发生后对象状态肯定不会改变。如果是可变对象，必须在编程中注意保证异常不会影响对象状态。有三个方法可以达到这个目的： （1） 将可能产生异常的代码和改变对象状态的代码分开，先执行可能产生异常的代码，如果产生异常，就不执行改变对象状态的代码。 （2） 对不容易分离产生异常代码和改变对象状态代码的方法，定义一个recover方法，在异常产生后调用recover方法修复被改变的类变量，恢复方法调用前的类状态。 （3） 在方法中使用对象的拷贝，这样当异常发生后，被影响的只是拷贝，对象本身不会受到影响。 5． 丢失的异常 请看下面的代码： public void method2() { try {     ……     method1();  //method1进行了数据库操作 } catch(SQLException e) {     ……     throw new MyException(“发生了数据库异常:”+e.getMessage); } } public void method3() {     try {     method2(); } catch(MyException e) {     e.printStackTrace();     …… } } 上面method2的代码中，try块捕获method1抛出的数据库异常SQLException后，抛出了新的自定义异常MyException。这段代码是否并没有什么问题，但看一下控制台的输出： MyException:发生了数据库异常：对象名称 \\\'MyTable\\\' 无效。 at MyClass.method2(MyClass.java:232) at MyClass.method3(MyClass.java:255) 原始异常SQLException的信息丢失了，这里只能看到method2里面定义的MyException的堆栈情况；而method1中发生的数据库异常的堆栈则看不到，如何排错呢，只有在method1的代码行中一行行去寻找数据库操作语句了，祈祷method1的方法体短一些吧。 JDK的开发者们也意识到了这个情况，在JDK1.4.1中，Throwable类增加了两个构造方法,public Throwable(Throwable cause)和public Throwable(String message,Throwable cause)，在构造函数中传入的原始异常堆栈信息将会在printStackTrace方法中打印出来。但对于还在使用JDK1.3的程序员，就只能自己实现打印原始异常堆栈信息的功能了。实现过程也很简单，只需要在自定义的异常类中增加一个原始异常字段，在构造函数中传入原始异常，然后重载printStackTrace方法，首先调用类中保存的原始异常的printStackTrace方法，然后再调用super.printStackTrace方法就可以打印出原始异常信息了。可以这样定义前面代码中出现的MyException类： public class MyExceptionextends Exception {     //构造函数     public SMException(Throwable cause)     {         this.cause_ = cause;     }     public MyException(String s,Throwable cause)     {         super(s);         this.cause_ = cause;     }     //重载printStackTrace方法，打印出原始异常堆栈信息     public void printStackTrace()     {         if (cause_ != null)         {             cause_.printStackTrace();         }         super.printStackTrace(s);     }     public void printStackTrace(PrintStream s)     {         if (cause_ != null)         {             cause_.printStackTrace(s);         }         super.printStackTrace(s);     }     public void printStackTrace(PrintWriter s)     {         if (cause_ != null)         {             cause_.printStackTrace(s);         }         super.printStackTrace(s);     }      //原始异常      private Throwable cause_; } 6． 不要使用同时使用异常机制和返回值来进行异常处理 下面是我们项目中的一段代码 try {     doSomething(); } catch(MyException e) { if(e.getErrcode == -1) {     …… } if(e.getErrcode == -2) {    …… } …… } 假如在过一段时间后来看这段代码，你能弄明白是什么意思吗？混合使用JAVA异常处理机制和返回值使程序的异常处理部分变得“丑陋不堪”，并难以理解。如果有多种不同的异常情况，就定义多种不同的异常，而不要像上面代码那样综合使用Exception和返回值。 修改后的正确代码如下： try {     doSomething();  //抛出MyExceptionA和MyExceptionB } catch(MyExceptionA e) { …… } catch(MyExceptionB e) {     …… } 7． 不要让try块过于庞大 出于省事的目的，很多人习惯于用一个庞大的try块包含所有可能产生异常的代码， 这样有两个坏处： 阅读代码的时候，在try块冗长的代码中，不容易知道到底是哪些代码会抛出哪些异常，不利于代码维护。 使用try捕获异常是以程序执行效率为代价的，将不需要捕获异常的代码包含在try块中，影响了代码执行的效率。 文章来源：<a href=\"\\&quot;http://blog.csdn.net/zhaohuabing\\&quot;\" target=\"\\&quot;_blank\\&quot;\">http://blog.csdn.net/zhaohuabing</a>参考资料 [1]   Joshua Bloch  Effective Java Programming Language Guide [2]   http://java.sun.com/\n</p>', '2012-09-18 12:08:25', '1', null);
INSERT INTO `blog_post` VALUES ('532', '1', 'Java MD5加密工具类', '<p>\n	MD5加密是不可逆的，一般用于保存用户密码到数据库\n</p>\n<p>\n	Apache Commons Codec 封装了常用的加密算法，比如：MD5,SHA，还有一些编码算法，比如：Base64，UrlCodec，非常好用<a href=\"http://commons.apache.org/codec/userguide.html\" target=\"_blank\" style=\"line-height:1.5;\">项目主页</a> \n</p>\n<p>\n	Base64也有一个开源的轻量级的工具包，<a href=\"http://www.sauronsoftware.it/projects/javabase64/\" target=\"_blank\">项目主页</a> \n</p>\n<p>\n	示例\n</p>\n<p>\n	<a href=\"#\" class=\"more-tag\">Read<!--more-->More</a> \n</p>\n<pre class=\"prettyprint lang-java\">/**\n * Main\n * \n * @param args\n */\npublic static void main(String[] args) {\n    // 21232f297a57a5a743894a0e4a801fc3\n    System.out.println(DigestUtils.md5Hex(\"admin\"));\n    System.out.println(DigestUtils.shaHex(\"admin\"));\n    System.out.println(DigestUtils.sha256Hex(\"admin\"));\n}</pre>\n<h3>\n	MD5Util.java，来自<a href=\"https://en.gravatar.com/site/implement/images/java/\" target=\"_blank\">Gravatar</a>\n</h3>\n<pre class=\"prettyprint lang-java\">import java.util.*;\nimport java.io.*;\nimport java.security.*;\n\npublic class MD5Util {\n\n    public static String hex(byte[] array)  {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i &lt; array.length; ++i) { \n            sb.append(Integer.toHexString((array[i] &amp; 0xFF) | 0x100).substring(1, 3)); \n        } \n        \n        return sb.toString(); \n    } \n    \n    public static String md5Hex(String message) { \n        try { \n            MessageDigest md = MessageDigest.getInstance(\"MD5\"); \n            return hex(md.digest(message.getBytes(\"CP1252\"))); \n        } catch (NoSuchAlgorithmException e) { \n        \n        } catch (UnsupportedEncodingException e) { \n        \n        } \n        return message; \n    } \n}</pre>\n<h3>\n	MD5.java\n</h3>\n<pre class=\"prettyprint lang-java\">package net.zhanqi.blog.util;\n\nimport java.security.MessageDigest;\n\n/**\n * MD5加密算法\n * \n * @author zhanqi\n * \n * @since 2012-08-08\n */\n\npublic class MD5 {\n\n    /**\n     * MD5普通加密\n     * \n     * @param rawPass\n     *            明文\n     * @return\n     */\n    public final static String encode(String rawPass) {\n        return encode(rawPass, null);\n    }\n\n    /**\n     * * MD5盐值加密\n     * \n     * @param rawPass\n     *            明文\n     * @param salt\n     *            盐值\n     * @return\n     */\n    public final static String encode(String rawPass, Object salt) {\n        String saltedPass = mergePasswordAndSalt(rawPass, salt);\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            byte[] digest = messageDigest.digest(saltedPass.getBytes(\"UTF-8\"));\n            return new String(encode(digest));\n        } catch (Exception e) {\n            return rawPass;\n        }\n    }\n\n    /**\n     * \n     * 拼接密码与盐值\n     * \n     * @param password\n     * @param salt\n     * @param strict\n     * \n     * @return 密码{盐值}\n     */\n    private static String mergePasswordAndSalt(String password, Object salt) {\n        if (salt == null || \"\".equals(salt.toString().trim())) {\n            return password;\n        }\n        return password + \"{\" + salt.toString() + \"}\";\n    }\n\n    /**\n     * encode\n     * \n     * @param bytes\n     * @return\n     */\n    private static char[] encode(byte[] bytes) {\n        char[] HEX = { \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'a\', \'b\', \'c\', \'d\', \'e\',\n                \'f\' };\n        int nBytes = bytes.length;\n        char[] result = new char[2 * nBytes];\n        int j = 0;\n        for (int i = 0; i &lt; nBytes; i++) { // Char for top 4 bits result[j++] = HEX[(0xF0 &amp; bytes[i]) &gt;&gt;&gt; 4];\n\n            // Bottom 4\n            result[j++] = HEX[(0x0F &amp; bytes[i])];\n        }\n        return result;\n    }\n\n    /**\n     * Test\n     * \n     * @param args\n     * */\n    public static void main(String[] args) {\n        // 21232f297a57a5a743894a0e4a801fc3\n        System.out.println(MD5.encode(\"admin\"));\n        System.out.println(MD5.encode(\"admin\", \"zhanqi\"));\n    }\n}</pre>\n<h3>\n	再发一个：\n</h3>\n<pre class=\"prettyprint lang-java\">public static String encode(String str) throws NoSuchAlgorithmException {\n    MessageDigest digester = MessageDigest.getInstance(\"MD5\");\n    digester.update(str.getBytes());\n    byte[] hash = digester.digest();\n    StringBuffer hexString = new StringBuffer();\n    for (int i = 0; i &lt; hash.length; i++) {\n        if ((0xff &amp; hash[i]) &lt; 0x10) {\n            hexString.append(\"0\" + Integer.toHexString((0xFF &amp; hash[i]))); \n        } else { \n            hexString.append(Integer.toHexString(0xFF &amp; hash[i])); \n        } \n    } \n    return hexString.toString(); \n}</pre>', '2012-09-19 12:08:25', '2', null);
INSERT INTO `blog_post` VALUES ('533', '1', 'Java Clob转String', '<p>\n	clob类型，尽量不使用，存取都是个麻烦，集成Hibernate的时候，怎么配置都折腾不出来，最后使用土方法，加一个String属性，存储对应的clob字段转换后的值。&nbsp;\n</p>\n<p>\n	注意：&nbsp;\n</p>\n<p>\n	1：使用EL表达式的时候，必须把转换过程写在get方法内；&nbsp;\n</p>\n<p>\n	2：使用JOSN的时候，必须把clob类型设为null，否则无法转换为JSON。&nbsp;\n</p>\n<p>\n	<a href=\"#\" class=\"more-tag\">Read<!--more-->More</a> \n</p>\n<p>\n	代码：\n</p>\n<pre class=\"prettyprint lang-java\">private Clob contentClob;\nprivate String contentString;\n\npublic String getContentString() {\n    if (contentString != null) {\n        return contentString;\n    }\n\n    if (contentClob == null) {\n        return null;\n    }\n\n    StringBuilder sb = new StringBuilder();\n    Reader rd = null;\n    try {\n        rd = contentClob.getCharacterStream();\n        int i = 0;\n        char[] cbuf = new char[60000];\n        while ((i = rd.read(cbuf)) != -1) {\n            sb.append(cbuf, 0, i);\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (rd != null) {\n            try {\n                rd.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    contentString = sb.toString();\n    \n    return contentString;\n}</pre>\n<p>\n	<br />\n</p>', '2013-01-03 17:53:08', '2', null);
INSERT INTO `blog_post` VALUES ('534', '1', 'JavaScript 获取URL参数', '<p>\n	JavaScript 获取URL参数，返回Object，支持checkbox。\n</p>\n<p>\n	检测参数必须使用hasOwnProperty，不能用if(obj.name)，因为如果对象的属性不存在，会返回 undefined ，所以if 还是会 true。\n</p>\n<p>\n	原理：\n</p>\n<p>\n	<a href=\"#\" class=\"more-tag\">Read<!--more-->More</a> \n</p>\n<p>\n	<code>window.location.search = ?xxx=xxx&amp;xxx=xxx</code> \n</p>\n<pre class=\"prettyprint lang-js linenums\">/**\n * 获取URL参数，返回Object\n *\n * 检测参数必须使用hasOwnProperty，不能用if(obj.name)\n *  \n */\nfunction getParamsObject() {\n    var params = {};\n    var search = location.search;\n    if (!search) {\n        return params;\n    }\n\n    search = \'&amp;\' + search.substring(1);\n    var parts = search.split(/&amp;/);\n    if (!parts || !parts.length) {\n        return params;\n    }\n\n    var param, name, value, property;\n    for ( var i in parts) {\n        if (parts[i]) {\n            param = parts[i].split(/=/);\n            name = param[0];\n            value = param[1];\n            property = params[name];\n            if (typeof property === \'undefined\') {\n                params[name] = param[1];\n            } else if (!Object.prototype.toString.apply(property) === \'[object Array]\') {\n                params[name] = [ value, property ];\n            } else {\n                params[name] = [ value, property ];\n            }\n\n        }\n    }\n\n    return params;\n}\n// demo\nvar params = getParamsObject();\nconsole.dir(params);\nconsole.dir(params.hasOwnProperty(\'action\'));</pre>', '2013-01-08 10:04:22', '2', null);
INSERT INTO `blog_post` VALUES ('535', '1', 'g', 'ffff', '2015-01-30 22:46:08', '1', null);

-- ----------------------------
-- Table structure for `blog_post_tag`
-- ----------------------------
DROP TABLE IF EXISTS `blog_post_tag`;
CREATE TABLE `blog_post_tag` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `postid` int(11) unsigned NOT NULL,
  `tagid` int(11) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of blog_post_tag
-- ----------------------------
INSERT INTO `blog_post_tag` VALUES ('17', '533', '3');
INSERT INTO `blog_post_tag` VALUES ('19', '533', '13');
INSERT INTO `blog_post_tag` VALUES ('20', '533', '10');
INSERT INTO `blog_post_tag` VALUES ('21', '534', '7');
INSERT INTO `blog_post_tag` VALUES ('22', '534', '4');

-- ----------------------------
-- Table structure for `blog_tag`
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_bin NOT NULL,
  `slug` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES ('2', 'php标签', 'php');
INSERT INTO `blog_tag` VALUES ('3', 'qq标签', 'qq');
INSERT INTO `blog_tag` VALUES ('4', 'diany标签', 'diany');
INSERT INTO `blog_tag` VALUES ('6', 'js标签', 'js');
INSERT INTO `blog_tag` VALUES ('7', 'css标签', 'css');
INSERT INTO `blog_tag` VALUES ('8', 'html标签', 'html');
INSERT INTO `blog_tag` VALUES ('10', '测试', 'tests');
INSERT INTO `blog_tag` VALUES ('13', 'xx3', 'sf');

-- ----------------------------
-- Table structure for `blog_user`
-- ----------------------------
DROP TABLE IF EXISTS `blog_user`;
CREATE TABLE `blog_user` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL DEFAULT '',
  `password` varchar(255) NOT NULL DEFAULT '',
  `name` varchar(255) DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `user_login_key` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_user
-- ----------------------------
INSERT INTO `blog_user` VALUES ('1', 'admin', '64cfc00fe71dc6d055e63852de7414bf', 'admin');
